[{"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/index.js":"1","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/reportWebVitals.js":"2","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/App/App.js":"3","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/NavBar.js":"4","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/Loader.js":"5","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Item/Item.js":"6","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Invoice/Invoice.js":"7","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/supplier/Supplier.js":"8","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/customer/Customer.js":"9","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/user/User.js":"10","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Stock/Stock.js":"11","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Login/LoginForm.js":"12","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/NavBarElements.js":"13","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/useTable.js":"14","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/Popup.js":"15","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/PageHeader.js":"16","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/Notification.js":"17","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Item/ItemForm.js":"18","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/ConfirmDialog.js":"19","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Invoice/ViewDetail.js":"20","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Invoice/InvoiceForm.js":"21","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/supplier/SupplierForm.js":"22","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/customer/CustomerForm.js":"23","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/useForm.js":"24","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Stock/StockForm.js":"25","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/Controls.js":"26","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/enum/urls.js":"27","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/user/UserForm.js":"28","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/RadioGroup.js":"29","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/ActionButton.js":"30","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/Input.js":"31","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/Select.js":"32","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/DatePicker.js":"33","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/Button.js":"34"},{"size":460,"mtime":1633704717866,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":1633498327439,"results":"37","hashOfConfig":"36"},{"size":3789,"mtime":1636459371926,"results":"38","hashOfConfig":"36"},{"size":1235,"mtime":1636458925297,"results":"39","hashOfConfig":"36"},{"size":470,"mtime":1636202994951,"results":"40","hashOfConfig":"36"},{"size":10883,"mtime":1637069300430,"results":"41","hashOfConfig":"36"},{"size":13041,"mtime":1637075152832,"results":"42","hashOfConfig":"36"},{"size":10978,"mtime":1637069112882,"results":"43","hashOfConfig":"36"},{"size":11730,"mtime":1637068566968,"results":"44","hashOfConfig":"36"},{"size":11806,"mtime":1637075349025,"results":"45","hashOfConfig":"36"},{"size":12230,"mtime":1637074967923,"results":"46","hashOfConfig":"36"},{"size":5581,"mtime":1636342600196,"results":"47","hashOfConfig":"36"},{"size":1858,"mtime":1636459166988,"results":"48","hashOfConfig":"36"},{"size":3709,"mtime":1636273126176,"results":"49","hashOfConfig":"36"},{"size":1656,"mtime":1636203161816,"results":"50","hashOfConfig":"36"},{"size":1411,"mtime":1633756221774,"results":"51","hashOfConfig":"36"},{"size":792,"mtime":1636203143763,"results":"52","hashOfConfig":"36"},{"size":3336,"mtime":1636248871418,"results":"53","hashOfConfig":"36"},{"size":1155,"mtime":1634052639738,"results":"54","hashOfConfig":"36"},{"size":2009,"mtime":1636251307693,"results":"55","hashOfConfig":"36"},{"size":7451,"mtime":1636344359397,"results":"56","hashOfConfig":"36"},{"size":4074,"mtime":1636451249547,"results":"57","hashOfConfig":"36"},{"size":4403,"mtime":1636590095083,"results":"58","hashOfConfig":"36"},{"size":1134,"mtime":1633778156034,"results":"59","hashOfConfig":"36"},{"size":3830,"mtime":1636251210535,"results":"60","hashOfConfig":"36"},{"size":343,"mtime":1636447764004,"results":"61","hashOfConfig":"36"},{"size":810,"mtime":1637077603520,"results":"62","hashOfConfig":"36"},{"size":4480,"mtime":1636591185264,"results":"63","hashOfConfig":"36"},{"size":943,"mtime":1636450736481,"results":"64","hashOfConfig":"36"},{"size":869,"mtime":1634131437693,"results":"65","hashOfConfig":"36"},{"size":609,"mtime":1636258794864,"results":"66","hashOfConfig":"36"},{"size":975,"mtime":1636205636531,"results":"67","hashOfConfig":"36"},{"size":1041,"mtime":1635220851800,"results":"68","hashOfConfig":"36"},{"size":507,"mtime":1636197593948,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"gtkqde",{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"72"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"72"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/index.js",[],["156","157"],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/reportWebVitals.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/App/App.js",["158"],"import React, {useState} from \"react\";\nimport './App.css';\nimport {makeStyles} from \"@mui/styles\";\nimport {CssBaseline} from \"@material-ui/core\";\nimport Supplier from \"../pages/supplier/Supplier\";\nimport Customer from \"../pages/customer/Customer\";\nimport Item from \"../pages/Item/Item\";\nimport Stock from \"../pages/Stock/Stock\";\nimport Invoice from \"../pages/Invoice/Invoice\";\nimport NavBar from \"../components/NavBar\";\nimport Loader from \"../components/Loader\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport LoginForm from \"../pages/Login/LoginForm\";\nimport { useHistory } from \"react-router-dom\";\nimport User from \"../pages/user/User\";\n\nconst useStyles = makeStyles({\n    appMain: {\n        // paddingLeft: '320px',\n        width: '100%'\n    }\n})\n\nfunction App() {\n    const classes = useStyles();\n    const[loading, setLoading] = useState(false);\n    const[user, setUser] = useState({});\n    \n  return (\n      <>\n        {/* <SideMenu/> */}\n        <Loader\n            loading = {loading}\n        />\n        <div className={classes.appMain}>\n        <Router>\n            \n                <Switch>\n                \n                    <Route path='/' exact>\n                        <LoginForm\n                        setLoading = {setLoading}\n                        setUser = {setUser}\n                        />\n                    </Route>\n                    <Route path='/supplier'>\n                        <NavBar\n                            user = {user}\n                        />\n                        <Supplier\n                            setLoading = {setLoading}\n                            user = {user}\n                            // loading = {loading}\n                        />\n                    </Route>\n                    <Route path='/customer'>\n                        <NavBar\n                            user = {user}\n                        />\n                        <Customer\n                            setLoading = {setLoading}\n                            user = {user}\n                        />\n                    </Route>\n                    <Route path='/item'>\n                        <NavBar\n                            user = {user}\n                        />\n                        <Item\n                            setLoading = {setLoading}\n                            user = {user}\n                        />\n                    </Route>\n                    <Route path='/stock'>\n                        <NavBar\n                            user = {user}\n                        />\n                        <Stock\n                            setLoading = {setLoading}\n                            user = {user}\n                        />\n                    </Route>\n                    <Route path='/invoice'>\n                        <NavBar\n                            user = {user}\n                        />\n                        <Invoice\n                            setLoading = {setLoading}\n                            user = {user}\n                        />\n                    </Route>\n                    <Route path='/user'>\n                        <NavBar\n                            user = {user}\n                        />\n                        <User\n                            setLoading = {setLoading}\n                            user = {user}\n                        />\n                    </Route>\n                    <Route path='/logout'>\n                        <LoginForm\n                            setLoading = {setLoading}\n                            setUser = {setUser}\n                        />\n                    </Route>\n                </Switch>\n        </Router>\n            {/* <Header/> */}\n        </div>\n          <CssBaseline/>\n      </>\n  );\n}\n\nexport default App;\n\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/NavBar.js",["159"],"import React from 'react';\nimport {\n  Nav,\n  NavLink,\n  Bars,\n  NavMenu,\n  NavBtnLink,\n} from './NavBarElements';\n\nexport default function Navbar (props) {\n\n  const {user} = props;\n  \n  return (\n    <>\n      <Nav>\n        {/* <NavLink to='/'> */}\n          {/* <img src={require('../../images/logo.svg')} alt='logo' /> */}\n        {/* </NavLink> */}\n        <Bars />\n        <NavMenu>\n          <h1 style={{color:'white', fontWeight:'bold', marginRight: '100px'}}>Inventory Management System </h1>\n          <NavLink to='/supplier' activeStyle>\n            Suppliers\n          </NavLink>\n          <NavLink to='/customer' activeStyle>\n            Customers\n          </NavLink>\n          <NavLink to='/item' activeStyle>\n            Items\n          </NavLink>\n          <NavLink to='/stock' activeStyle>\n            Stocks\n          </NavLink>\n          <NavLink to='/invoice' activeStyle>\n            Invoices\n          </NavLink>\n          <NavLink to='/user' activeStyle>\n            {\n            user ? user.level == 'admin' ? 'Users' : 'Profile' : null\n            }\n          </NavLink>\n          {/* Second Nav */}\n          <NavBtnLink to='/logout'>Logout</NavBtnLink>\n        </NavMenu>\n        \n      </Nav>\n    </>\n  );\n};\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/Loader.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Item/Item.js",["160","161","162","163","164","165","166","167","168"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport CreateIcon from '@mui/icons-material/Create';\nimport AppRegistrationIcon from '@mui/icons-material/AppRegistration';\nimport {ModeEditOutlined} from \"@mui/icons-material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Search from \"@mui/icons-material/Search\"\nimport AddIcon from '@mui/icons-material/Add';\nimport Popup from \"../../components/Popup\";\nimport {makeStyles} from \"@mui/styles\";\nimport {InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar} from \"@mui/material\";\nimport useTable from \"../../components/useTable\"\nimport Controls from \"../../components/controls/Controls\";\nimport Notification from '../../components/Notification'\nimport ConfirmDialog from '../../components/ConfirmDialog'\nimport ItemForm from \"./ItemForm\";\nimport PageHeader from \"../../components/PageHeader\";\nimport Loader from \"../../components/Loader\";\nimport { base, itemApi } from '../../enum/urls';\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\n// const headCells = [\n//     {id: 'name', label:'Item Name'},\n//     {id: 'price', label:'Item Price'},\n//     {id: 'quantity', label:'Item Quantity'},\n//     {id: 'warranty', label:'Item Warranty'},\n//     {id: 'actions', label:'Actions', disableSorting: true}\n// ]\n\nexport default function Item(props) {\n\n    const {setLoading, user} = props;\n    const [recordForEdit, setRecordForEdit] = useState(null);\n    const classes = useStyles();\n    const [records, setRecords] = useState([]);\n    const [filterFn, setFilterFn] = useState({fn: items => {return items;}})\n    const [openPopup, setOpenPopup] = useState(false);\n    const [notify, setNotify] = useState({isOpen:false, message:'', type:''});\n    const [confirmDialog, setConfirmDialog] = useState({isOpen: false, title:'', subTitle:''})\n\n    const headCells = [\n        {id: 'name', label:'Item Name'},\n        {id: 'price', label:'Item Price'},\n        {id: 'quantity', label:'Item Quantity'},\n        {id: 'warranty', label:'Item Warranty'},\n        user.level == 'admin' ? {id: 'actions', label:'Actions', disableSorting: true} : null\n    ]\n\n    useEffect(() => {\n        setLoading(true);\n        console.log('useEffect')\n        axios.get(base.baseUrl + itemApi.baseUrl + itemApi.allitems)\n        .then((function (response){\n            console.log(\"response.data\", response.data)\n            setRecords(response.data.data)\n            setLoading(false);\n            // return list;\n        }))\n    }, [notify]);\n   \n    const {\n        TblContainer,\n        TblHead,\n        TblPagination,\n        recordsAfterPagingAndSorting\n    } = useTable(records, headCells, filterFn);\n\n    const handleSearch = e => {\n        let target = e.target;\n        setFilterFn({\n            fn: items => {\n                if(target.value == \"\")\n                    return items;\n                else\n                    return items.filter(x => x.name.toLowerCase().includes(target.value.toLowerCase()))\n            }\n        })\n    }\n\n    const addOrEdit = (item, resetForm) => {\n        // console.log('item', item)\n        setLoading(true);\n        if(item.id == 0){\n            axios.post(base.baseUrl + itemApi.baseUrl, item)\n            .then(response => {\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';\n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        else{\n            // console.log('AAAA')\n            axios.put(base.baseUrl + itemApi.baseUrl + item.id, item)\n            .then(response => {\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';\n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        resetForm();\n        setRecordForEdit(null);\n        setOpenPopup(false);\n    }\n\n    const notification = (open, message, type) =>{\n        setNotify({\n            isOpen: open,\n            message: message,\n            type: type\n        })\n    }\n    \n    const openInPopup = item =>{\n        setRecordForEdit(item)\n        setOpenPopup(true);\n    }\n\n    const onDelete = id => {\n        setConfirmDialog({\n            ...confirmDialog,\n            isOpen: false\n        })\n        setLoading(true);\n        axios.delete(base.baseUrl + itemApi.baseUrl + id)\n        .then(response => {\n            setLoading(false);\n            let type = response.data.status == 200 ? 'success' : 'error';\n            notification(true, response.data.message, type);\n        }).catch(error => {\n            console.log('Something went wrong!', error);\n        });\n    }\n\n    return (\n        user.level ?\n            <>\n                <PageHeader\n                    title=\"Item\"\n                    subTitle=\"View/ Add / Update / Delete Items\"\n                    icon={<AppRegistrationIcon fontSize=\"large\"/>}\n                />\n                {/*{loading ? <div>Loading....</div> :*/}\n                    <Paper className={classes.pageContent}>\n                        {/*<Paper style={{margin: 'auto', padding: 20, width: '60%'}}>*/}\n\n                        <Toolbar>\n                            <Controls.Input\n                                className={classes.searchInput}\n                                label=\"Search Items\"\n                                InputProps={{\n                                    startAdornment: (<InputAdornment position='start'>\n                                        <Search/>\n                                    </InputAdornment>)\n                                }}\n                                onChange={handleSearch}\n                            />\n                            {user.level == 'admin' ?\n                            <Controls.Button\n                                className={classes.newButton}\n                                text=\"Add New\"\n                                variant=\"outlined\"\n                                startIcon={<AddIcon/>}\n                                onClick={() => {\n                                    setOpenPopup(true);\n                                    setRecordForEdit(null);\n                                }}\n                            /> : null }\n                        </Toolbar>\n                        <TblContainer>\n                            <TblHead/>\n                            <TableBody>\n                                {\n                                    recordsAfterPagingAndSorting().map(item =>\n                                        (<TableRow key={item.id}>\n                                            <TableCell>{item.name}</TableCell>\n                                            <TableCell>{item.price}</TableCell>\n                                            <TableCell>{item.quantity}</TableCell>\n                                            <TableCell>{item.warranty}</TableCell>\n                                            {user.level == 'admin' ?\n                                                <TableCell>\n                                                    {/*Update data*/}\n                                                    <Controls.Button\n                                                        style={{marginRight: 10, paddingLeft: 20}}\n                                                        size=\"small\"\n                                                        startIcon={<CreateIcon/>}\n                                                        color=\"primary\"\n                                                        onClick={() => {\n                                                            openInPopup(item)\n                                                        }}\n                                                    >\n                                                        <ModeEditOutlined fontSize=\"small\"/>\n                                                    </Controls.Button>\n\n                                                    {/*Delete data*/}\n                                                    <Controls.Button\n                                                        style={{marginRight: 10, paddingLeft: 20}}\n                                                        size=\"small\"\n                                                        startIcon={<DeleteIcon/>}\n                                                        color=\"error\"\n                                                        onClick={() => {\n                                                            setConfirmDialog({\n                                                                isOpen: true,\n                                                                title: 'Are you sure to delete this record ?',\n                                                                subTitle: \"You can' t undo this operation\",\n                                                                onConfirm: () => {\n                                                                    onDelete(item.id)\n                                                                }\n                                                            })\n                                                        }}>\n                                                        <DeleteIcon fontSize=\"small\"/>\n                                                    </Controls.Button>\n                                                </TableCell> \n                                            : null }\n                                        </TableRow>)\n                                    )\n                                }\n                            </TableBody>\n                        </TblContainer>\n                        <TblPagination/>\n                    </Paper>\n                {/*}*/}\n\n                <Loader/>\n\n                <Popup\n                    title=\"Item Form\"\n                    openPopup={openPopup}\n                    setOpenPopup={setOpenPopup}\n                >\n                    <ItemForm\n                        recordForEdit={recordForEdit}\n                        addOrEdit={addOrEdit}\n                    />\n                </Popup>\n\n                <Notification\n                    notify={notify}\n                    setNotify={setNotify}\n                />\n                <ConfirmDialog\n                    confirmDialog={confirmDialog}\n                    setConfirmDialog={setConfirmDialog}\n                />\n            </>\n        : <div><h1>User Not Found !!!</h1></div>\n    );\n}\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Invoice/Invoice.js",["169","170","171","172"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport PeopleAltTwoToneIcon from \"@mui/icons-material/PeopleAltTwoTone\";\nimport {ModeEditOutlined} from \"@mui/icons-material\";\nimport Search from \"@mui/icons-material/Search\"\nimport AddIcon from '@mui/icons-material/Add';\nimport Popup from \"../../components/Popup\";\nimport {makeStyles} from \"@mui/styles\";\nimport {InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar} from \"@mui/material\";\nimport moment from 'moment';\nimport ViewListIcon from '@mui/icons-material/ViewList';\nimport useTable from \"../../components/useTable\"\nimport Controls from \"../../components/controls/Controls\";\nimport Notification from '../../components/Notification'\nimport ConfirmDialog from '../../components/ConfirmDialog'\nimport InvoiceForm from \"./InvoiceForm\";\nimport PageHeader from \"../../components/PageHeader\";\nimport Loader from \"../../components/Loader\";\nimport ViewDetail from './ViewDetail';\nimport { base, customerApi, orderApi, itemApi} from '../../enum/urls';\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\n// const headCells = [\n//     {id: 'orderId', label:'Invoice'},\n//     {id: 'orderDate', label:'Invoice Date'},\n//     {id: 'customerName', label:'Customer Name'},\n//     {id: 'amount', label:'Total Amount'},\n//     {id: 'actions', label:'View Details', disableSorting: true}\n// ]\n\nexport default function Invoice(props) {\n\n    const {setLoading, user, loading} = props;\n    const [recordForEdit, setRecordForEdit] = useState(null);\n    const [recordForView, setRecordForView] = useState(null);\n    const [recordList, setRecordList] = useState([]);\n    const classes = useStyles();\n    const [records, setRecords] = useState([]);\n    const [filterFn, setFilterFn] = useState({fn: items => {return items;}})\n    const [openPopupDetail, setOpenPopupDetail] = useState(false);\n    const [openPopupAdd, setOpenPopupAdd] = useState(false);\n    const [notify, setNotify] = useState({isOpen:false, message:'', type:''});\n    const [confirmDialog, setConfirmDialog] = useState({isOpen: false, title:'', subTitle:''})\n    const [itemOptions, setItemOptions] = useState([]);\n    const [itemQty, setItemQty] = useState([]);\n    const [customerOptions, setCustomerOptions] = useState([]);\n\n    const headCells = [\n        {id: 'orderId', label:'Invoice'},\n        {id: 'orderDate', label:'Invoice Date'},\n        {id: 'customerName', label:'Customer Name'},\n        {id: 'amount', label:'Total Amount'},\n        {id: 'actions', label:'View Details', disableSorting: true},\n    ]\n\n    useEffect(() => {\n        setLoading(true);\n        axios.get(base.baseUrl + customerApi.baseUrl + customerApi.customerIdNameList)\n        .then((function (response){\n            console.log(\"customer\", response.data.data)\n            setCustomerOptions(response.data.data)\n            // setLoading(false);\n        }))\n\n        setLoading(true);\n        axios.get(base.baseUrl + itemApi.baseUrl + itemApi.itemIdNameList)\n        .then((function (response){\n            console.log(\"setItemOptions\", response.data.data)\n            setItemOptions(response.data.data)\n            // setLoading(false);\n        }))\n\n        setLoading(true);\n        axios.get(base.baseUrl + itemApi.baseUrl + itemApi.itemIdQtyList)\n        .then((function (response){\n            console.log(\"setItemQtyOptions\", response.data.data)\n            setItemQty(response.data.data)\n            // setLoading(false);\n        }))\n\n        setLoading(true);\n        console.log('useEffect')\n        axios.get(base.baseUrl + orderApi.baseUrl + orderApi.allOrders)\n        .then((function (response){\n            console.log(\"allOrders\", response.data)\n            setRecords(response.data.data)\n            setLoading(false);\n            // return list;\n        }))\n    }, [notify]);\n   \n    const {\n        TblContainer,\n        TblHead,\n        TblPagination,\n        recordsAfterPagingAndSorting\n    } = useTable(records, headCells, filterFn);\n\n    const handleSearch = e => {\n        let target = e.target;\n        setFilterFn({\n            fn: items => {\n                if(target.value == \"\")\n                    return items;\n                else\n                    return items.filter(x => x.orderId.includes(target.value))\n            }\n        })\n    }\n\n    const addOrEdit = (supplier, resetForm) => {\n        setLoading(true);\n            console.log('supplier', supplier)\n            axios.post(base.baseUrl + orderApi.baseUrl, supplier)\n            .then(response => {\n                console.log(\"Status: \", response.status);\n                console.log(\"Message: \", response);\n                setLoading(false);\n                notification(true, response.data.message, 'success');\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        \n        resetForm();\n        setRecordForEdit(null);\n        setOpenPopupAdd(false);\n    }\n\n    const addToTable = (order, resetForm) => {\n        let cusName;\n        console.log('order', order)\n        if(order.customerId){\n            cusName = customerOptions.filter( function (cus) {\n                return cus.id == order.customerId;\n            })[0].name;\n        }\n        let itemName = itemOptions.filter( function (item) {\n            return item.id == order.itemId;\n        })[0].name;\n          \n        order.id = recordList.length;\n        order.customerName = cusName;\n        order.itemName = itemName;\n        order.userId = user.id;\n\n        setRecordList([...recordList, order]);\n\n        resetForm();\n        console.log('values', order)\n        console.log('recordList', recordList)\n    }\n\n    const notification = (open, message, type) =>{\n        console.log('AAAAAAAA')\n        setNotify({\n            isOpen: open,\n            message: message,\n            type: type\n        })\n    }\n    \n    // const openInPopup = item =>{\n    //     setRecordForEdit(item)\n    //     // setOpenPopup(true);\n    // }\n\n    const openViewDetail = item =>{\n        console.log('item', item.orderItemList);\n        setRecordForView(item.orderItemList)\n        setOpenPopupDetail(true);\n    }\n\n    // const onDelete = id => {\n    //     setConfirmDialog({\n    //         ...confirmDialog,\n    //         isOpen: false\n    //     })\n    //     setLoading(true);\n\n    //     // supplierService.deleteSupplier(id);\n    //     // setRecords(supplierService.getAllSuppliers());\n    //     axios.delete('http://localhost:8080/api/v1/invoice/'+ id)\n    //     .then(response => {\n    //         // setLoading(false);\n    //         console.log(\"delete: \", response);\n    //         setLoading(false);\n    //         notification(true, response.data.message, 'success');\n    //     }).catch(error => {\n    //         console.log('Something went wrong!', error);\n    //     });\n    // }\n\n    return (\n        user.level && !loading?\n            <>\n                <PageHeader\n                    title=\"Invoice\"\n                    subTitle=\"View/ Add / Update / Delete Invoices\"\n                    icon={<PeopleAltTwoToneIcon fontSize=\"large\"/>}\n                />\n        \n                <Paper className={classes.pageContent}>\n                    <Toolbar>\n                        <Controls.Input\n                            className={classes.searchInput}\n                            label=\"Search Invoices\"\n                            InputProps={{\n                                startAdornment: (<InputAdornment position='start'>\n                                    <Search/>\n                                </InputAdornment>)\n                            }}\n                            onChange={handleSearch}\n                        />\n                        {/* { user.level == 'admin' ? */}\n                            <Controls.Button\n                                className={classes.newButton}\n                                text=\"Add New\"\n                                variant=\"outlined\"\n                                startIcon={<AddIcon/>}\n                                onClick={() => {\n                                    setOpenPopupAdd(true);\n                                    setRecordForEdit(null);\n                                    setRecordList([]);\n                                }}\n                            />\n                        {/* : null } */}\n                    </Toolbar>\n                    <TblContainer>\n                        <TblHead/>\n                        <TableBody>\n                            {\n                                recordsAfterPagingAndSorting().map(item =>\n                                    (<TableRow key={item.orderId}>\n                                        <TableCell>{item.orderId}</TableCell>\n                                        <TableCell>{moment(item.orderDate).format('DD/MMM/yyyy')}</TableCell>\n                                        <TableCell>{item.customerName}</TableCell>\n                                        <TableCell>{item.totalAmount}</TableCell>\n                                        <TableCell>\n                                            {/*Update data*/}\n                                            <Controls.Button\n                                                style={{marginRight: 10, paddingLeft: 20}}\n                                                size=\"small\"\n                                                startIcon={<ViewListIcon/>}\n                                                color=\"primary\"\n                                                onClick={() => {\n                                                    openViewDetail(item)\n                                                }}\n                                            >\n                                                <ModeEditOutlined fontSize=\"small\"/>\n                                            </Controls.Button>\n\n                                            {/*Delete data*/}\n                                            {/* <Controls.Button\n                                                style={{marginRight: 10, paddingLeft: 20}}\n                                                size=\"small\"\n                                                startIcon={<DeleteIcon/>}\n                                                color=\"error\"\n                                                onClick={() => {\n                                                    setConfirmDialog({\n                                                        isOpen: true,\n                                                        title: 'Are you sure to delete this record ?',\n                                                        subTitle: \"You can' t undo this operation\",\n                                                        onConfirm: () => {\n                                                            onDelete(item.id)\n                                                        }\n                                                    })\n                                                }}>\n                                                <DeleteIcon fontSize=\"small\"/>\n                                            </Controls.Button> */}\n                                        </TableCell>\n                                    </TableRow>)\n                                )\n                            }\n                        </TableBody>\n                    </TblContainer>\n                    <TblPagination/>\n                </Paper>\n                \n                <Loader/>\n\n                <Popup\n                    title=\"Invoice Details\"\n                    openPopup={openPopupDetail}\n                    setOpenPopup={setOpenPopupDetail}\n                >\n                    <ViewDetail\n                        recordForView={recordForView}\n                    />\n                </Popup>\n\n                <Popup\n                    title=\"Invoice Form\"\n                    openPopup={openPopupAdd}\n                    setOpenPopup={setOpenPopupAdd}\n                >\n                    <InvoiceForm\n                        recordForEdit={recordForEdit}\n                        addOrEdit={addOrEdit}\n                        recordList={recordList}\n                        setRecordList={setRecordList}\n                        customerOptions={customerOptions}\n                        itemOptions={itemOptions}\n                        addToTable={addToTable}\n                        itemQty={itemQty}\n                    />                \n                </Popup>\n\n                <Notification\n                    notify={notify}\n                    setNotify={setNotify}\n                />\n                <ConfirmDialog\n                    confirmDialog={confirmDialog}\n                    setConfirmDialog={setConfirmDialog}\n                />\n            </>\n        : <div><h1>User Not Found !!!</h1></div>\n    );\n}\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/supplier/Supplier.js",["173","174","175","176","177","178","179","180","181"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport CreateIcon from '@mui/icons-material/Create';\nimport PeopleAltTwoToneIcon from \"@mui/icons-material/PeopleAltTwoTone\";\nimport {ModeEditOutlined} from \"@mui/icons-material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Search from \"@mui/icons-material/Search\"\nimport AddIcon from '@mui/icons-material/Add';\nimport Popup from \"../../components/Popup\";\nimport {makeStyles} from \"@mui/styles\";\nimport {InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar} from \"@mui/material\";\nimport useTable from \"../../components/useTable\"\nimport Controls from \"../../components/controls/Controls\";\nimport Notification from '../../components/Notification'\nimport ConfirmDialog from '../../components/ConfirmDialog'\nimport SupplierForm from \"./SupplierForm\";\nimport PageHeader from \"../../components/PageHeader\";\nimport Loader from \"../../components/Loader\";\nimport { base, supplierApi } from '../../enum/urls';\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\n// const headCells = [\n//     {id: 'supName', label:'Supplier Name'},\n//     {id: 'address1', label:'Address Line 1'},\n//     {id: 'address2', label:'Address Line 2'},\n//     {id: 'address3', label:'Address Line 3'},\n//     {id: 'email', label:'Email'},\n//     {id: 'contact', label:'Contact Numbers', disableSorting: true},\n//     {id: 'actions', label:'Actions', disableSorting: true}\n// ]\n\nexport default function Supplier(props) {\n\n    const {setLoading, user} = props;\n    const [recordForEdit, setRecordForEdit] = useState(null);\n    const classes = useStyles();\n    const [records, setRecords] = useState([]);\n    const [filterFn, setFilterFn] = useState({fn: items => {return items;}})\n    const [openPopup, setOpenPopup] = useState(false);\n    const [notify, setNotify] = useState({isOpen:false, message:'', type:''});\n    const [confirmDialog, setConfirmDialog] = useState({isOpen: false, title:'', subTitle:''})\n\n    const headCells = [\n        {id: 'supName', label:'Supplier Name'},\n        {id: 'address1', label:'Address Line 1'},\n        {id: 'address2', label:'Address Line 2'},\n        {id: 'address3', label:'Address Line 3'},\n        {id: 'email', label:'Email'},\n        {id: 'contact', label:'Contact Number', disableSorting: true},\n        user.level == 'admin' ? {id: 'actions', label:'Actions', disableSorting: true} : null\n    ]\n    \n    useEffect(() => {\n        setLoading(true);\n        console.log('useEffect')\n        axios.get(base.baseUrl + supplierApi.baseUrl + supplierApi.allSuppliers)\n        .then((function (response){\n            // console.log(\"response.data\", response.data)\n            setRecords(response.data.data)\n            setLoading(false);\n        }))\n    }, [notify]);\n   \n    const {\n        TblContainer,\n        TblHead,\n        TblPagination,\n        recordsAfterPagingAndSorting\n    } = useTable(records, headCells, filterFn);\n\n    const handleSearch = e => {\n        let target = e.target;\n        setFilterFn({\n            fn: items => {\n                if(target.value == \"\")\n                    return items;\n                else\n                    return items.filter(x => x.supName.toLowerCase().includes(target.value.toLowerCase()))\n            }\n        })\n    }\n\n    const addOrEdit = (supplier, resetForm) => {\n        setLoading(true);\n        if(supplier.id == 0){\n            axios.post(base.baseUrl + supplierApi.baseUrl, supplier)\n            .then(response => {\n                // console.log(\"Status: \", response.status);\n                console.log(\"response.data: \", response.data);\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';               \n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        else{\n            axios.put(base.baseUrl + supplierApi.baseUrl + supplier.id, supplier)\n            .then(response => {\n                console.log(\"Status: \", response.status);\n                console.log(\"Message: \", response);\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';\n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        resetForm();\n        setRecordForEdit(null);\n        setOpenPopup(false);\n    }\n\n    const notification = (open, message, type) =>{\n        setNotify({\n            isOpen: open,\n            message: message,\n            type: type\n        })\n    }\n    \n    const openInPopup = item =>{\n        setRecordForEdit(item)\n        setOpenPopup(true);\n    }\n\n    const onDelete = id => {\n        setConfirmDialog({\n            ...confirmDialog,\n            isOpen: false\n        })\n        setLoading(true);\n        axios.delete(base.baseUrl + supplierApi.baseUrl + id)\n        .then(response => {\n            setLoading(false);\n            let type = response.data.status == 200 ? 'success' : 'error';\n            notification(true, response.data.message, type);\n        }).catch(error => {\n            console.log('Something went wrong!', error);\n        });\n    }\n\n    return (\n        user.level ? \n        <>\n            <PageHeader\n                title=\"Supplier\"\n                subTitle=\"View/ Add / Update / Delete Suppliers\"\n                icon={<PeopleAltTwoToneIcon fontSize=\"large\"/>}\n            />\n                <Paper className={classes.pageContent}>\n                    <Toolbar>\n                        <Controls.Input\n                            className={classes.searchInput}\n                            label=\"Search Suppliers\"\n                            InputProps={{\n                                startAdornment: (<InputAdornment position='start'>\n                                    <Search/>\n                                </InputAdornment>)\n                            }}\n                            onChange={handleSearch}\n                        />\n                        {user.level == 'admin' ? \n                        <Controls.Button\n                            className={classes.newButton}\n                            text=\"Add New\"\n                            variant=\"outlined\"\n                            startIcon={<AddIcon/>}\n                            onClick={() => {\n                                setOpenPopup(true);\n                                setRecordForEdit(null);\n                            }}\n                        /> : null }\n                    </Toolbar>\n                    <TblContainer>\n                        <TblHead/>\n                        <TableBody>\n                            {\n                                recordsAfterPagingAndSorting().map(item =>\n                                    (<TableRow key={item.id}>\n                                        <TableCell>{item.supName}</TableCell>\n                                        <TableCell>{item.address1}</TableCell>\n                                        <TableCell>{item.address2}</TableCell>\n                                        <TableCell>{item.address3}</TableCell>\n                                        <TableCell>{item.email}</TableCell>\n                                        <TableCell>{item.contact}</TableCell>\n                                        {user.level == 'admin' ?\n                                            <TableCell>\n                                                {/*Update data*/}\n                                                <Controls.Button\n                                                    style={{marginRight: 10, paddingLeft: 20}}\n                                                    size=\"small\"\n                                                    startIcon={<CreateIcon/>}\n                                                    color=\"primary\"\n                                                    onClick={() => {\n                                                        openInPopup(item)\n                                                    }}\n                                                >\n                                                    <ModeEditOutlined fontSize=\"small\"/>\n                                                </Controls.Button>\n\n                                                {/*Delete data*/}\n                                                <Controls.Button\n                                                    style={{marginRight: 10, paddingLeft: 20}}\n                                                    size=\"small\"\n                                                    startIcon={<DeleteIcon/>}\n                                                    color=\"error\"\n                                                    onClick={() => {\n                                                        setConfirmDialog({\n                                                            isOpen: true,\n                                                            title: 'Are you sure to delete this record ?',\n                                                            subTitle: \"You can' t undo this operation\",\n                                                            onConfirm: () => {\n                                                                onDelete(item.id)\n                                                            }\n                                                        })\n                                                    }}>\n                                                    <DeleteIcon fontSize=\"small\"/>\n                                                </Controls.Button>\n                                            </TableCell>\n                                        : null}\n                                    </TableRow>)\n                                )\n                            }\n                        </TableBody>\n                    </TblContainer>\n                    <TblPagination/>\n                </Paper>\n            {/*}*/}\n\n            <Loader/>\n\n            <Popup\n                title=\"Supplier Form\"\n                openPopup={openPopup}\n                setOpenPopup={setOpenPopup}\n            >\n                <SupplierForm\n                    recordForEdit={recordForEdit}\n                    addOrEdit={addOrEdit}\n                />\n            </Popup>\n\n            <Notification\n                notify={notify}\n                setNotify={setNotify}\n            />\n            <ConfirmDialog\n                confirmDialog={confirmDialog}\n                setConfirmDialog={setConfirmDialog}\n            />\n        </> \n        : <div><h1>User Not Found !!!</h1></div>\n    );\n}\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/customer/Customer.js",["182","183","184","185","186","187","188","189"],"import React, {useEffect, useState} from 'react';\nimport PeopleAltTwoToneIcon from \"@mui/icons-material/PeopleAltTwoTone\";\nimport {InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar} from \"@mui/material\";\nimport {makeStyles} from \"@mui/styles\";\nimport Search from \"@mui/icons-material/Search\"\nimport AddIcon from '@mui/icons-material/Add';\nimport {ModeEditOutlined} from \"@mui/icons-material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CreateIcon from '@mui/icons-material/Create';\nimport axios from 'axios';\nimport CustomerForm from \"./CustomerForm\";\nimport PageHeader from \"../../components/PageHeader\";\nimport useTable from \"../../components/useTable\"\nimport Controls from \"../../components/controls/Controls\";\nimport Popup from \"../../components/Popup\";\nimport Notification from '../../components/Notification'\nimport ConfirmDialog from '../../components/ConfirmDialog'\nimport { base,customerApi } from '../../enum/urls';\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\n// const headCells = [\n//     {id: 'firstName', label:'First Name'},\n//     {id: 'lastName', label:'Last Name'},\n//     {id: 'address1', label:'Address Line 1'},\n//     {id: 'address2', label:'Address Line 2'},\n//     {id: 'address3', label:'Address Line 3'},\n//     {id: 'email', label:'Email'},\n//     {id: 'contact', label:'Contact Numbers', disableSorting: true},\n//     {id: 'actions', label:'Actions', disableSorting: true}\n// ]\n\nexport default function Customer(props) {\n\n    const {setLoading, user} = props;\n    const [recordForEdit, setRecordForEdit] = useState(null);\n    const classes = useStyles();\n    const [records, setRecords] = useState([]);\n    const [filterFn, setFilterFn] = useState({fn: items => {return items;}})\n    const [openPopup, setOpenPopup] = useState(false);\n    const [notify, setNotify] = useState({isOpen:false, message:'', type:''});\n    const [confirmDialog, setConfirmDialog] = useState({isOpen: false, title:'', subTitle:''})\n\n    const headCells = [\n        {id: 'firstName', label:'First Name'},\n        {id: 'lastName', label:'Last Name'},\n        {id: 'address1', label:'Address Line 1'},\n        {id: 'address2', label:'Address Line 2'},\n        {id: 'address3', label:'Address Line 3'},\n        {id: 'email', label:'Email'},\n        {id: 'contact', label:'Contact Number', disableSorting: true},\n        user.level == 'admin' ? {id: 'actions', label:'Actions', disableSorting: true} : null\n    ]\n\n    useEffect(() => {\n        setLoading(true);\n        console.log('useEffect')\n        axios.get(base.baseUrl + customerApi.baseUrl + customerApi.allCustomers)\n        .then((function (response){\n            // console.log(\"response.data\", response.data)\n            setRecords(response.data.data)\n            setLoading(false);\n            // return list;\n        }))\n    }, [notify]);\n   \n    const {\n        TblContainer,\n        TblHead,\n        TblPagination,\n        recordsAfterPagingAndSorting\n    } = useTable(records, headCells, filterFn);\n\n    const handleSearch = e => {\n        let target = e.target;\n        setFilterFn({\n            fn: items => {\n                if(target.value == \"\")\n                    return items;\n                else\n                    return items.filter(x => (x.firstName + x.lastName).toLowerCase().includes(target.value.toLowerCase()))\n            }\n        })\n    }\n\n    const addOrEdit = (customer, resetForm) => {\n        setLoading(true);\n        if(customer.id == 0){\n            axios.post(base.baseUrl + customerApi.baseUrl , customer)\n            .then(response => {\n                // console.log(\"Status: \", response.status);\n                // console.log(\"Message: \", response);\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';\n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        else{\n            console.log('customer ', customer);\n            axios.put(base.baseUrl + customerApi.baseUrl + customer.id, customer)\n            .then(response => {\n                // console.log(\"Status: \", response.status);\n                // console.log(\"Message: \", response);\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';\n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        resetForm();\n        setRecordForEdit(null);\n        setOpenPopup(false);\n    }\n\n    const notification = (open, message, type) =>{\n        console.log('AAAAAAAA')\n        setNotify({\n            isOpen: open,\n            message: message,\n            type: type\n        })\n    }\n\n    const openInPopup = item =>{\n        setRecordForEdit(item)\n        setOpenPopup(true);\n    }\n\n    const onDelete = id => {\n\n        setConfirmDialog({\n            ...confirmDialog,\n            isOpen: false\n        })\n        axios.delete(base.baseUrl + customerApi.baseUrl + id)\n        .then(response => {\n            // setLoading(false);\n            console.log(\"delete: \", response);\n            setLoading(false);\n            notification(true, response.data.message, 'success');\n        }).catch(error => {\n            console.log('Something went wrong!', error);\n        });\n    }\n\n    return (\n        user.level ? \n            <>\n                <PageHeader\n                    title=\"Customer\"\n                    subTitle=\"View/ Add / Update / Delete Customers\"\n                    icon={<PeopleAltTwoToneIcon fontSize=\"large\"/>}\n                />\n                {/*{loading ? <div>Loading....</div> :*/}\n                    <Paper className={classes.pageContent}>\n                        {/*<Paper style={{margin: 'auto', padding: 20, width: '60%'}}>*/}\n\n                        <Toolbar>\n                            <Controls.Input\n                                className={classes.searchInput}\n                                label=\"Search Customers\"\n                                InputProps={{\n                                    startAdornment: (<InputAdornment position='start'>\n                                        <Search/>\n                                    </InputAdornment>)\n                                }}\n                                onChange={handleSearch}\n                            />\n                            {user.level == 'admin' ? \n                            <Controls.Button\n                                className={classes.newButton}\n                                text=\"Add New\"\n                                variant=\"outlined\"\n                                startIcon={<AddIcon/>}\n                                onClick={() => {\n                                    setOpenPopup(true);\n                                    setRecordForEdit(null);\n                                }}\n                            /> : null }\n                        </Toolbar>\n                        <TblContainer>\n                            <TblHead/>\n                            <TableBody>\n                                {\n                                    recordsAfterPagingAndSorting().map(item =>\n                                        (<TableRow key={item.id}>\n                                            <TableCell>{item.firstName}</TableCell>\n                                            <TableCell>{item.lastName}</TableCell>\n                                            <TableCell>{item.address1}</TableCell>\n                                            <TableCell>{item.address2}</TableCell>\n                                            <TableCell>{item.address3}</TableCell>\n                                            <TableCell>{item.email}</TableCell>\n                                            <TableCell>{item.contact}</TableCell>\n                                            {user.level == 'admin' ?\n                                                <TableCell>\n                                                    {/*Update data*/}\n                                                    <Controls.Button\n                                                        style={{marginRight: 10, paddingLeft: 20}}\n                                                        size=\"small\"\n                                                        startIcon={<CreateIcon/>}\n                                                        color=\"primary\"\n                                                        onClick={() => {\n                                                            openInPopup(item)\n                                                        }}\n                                                    >\n                                                        <ModeEditOutlined fontSize=\"small\"/>\n                                                    </Controls.Button>\n\n                                                    {/*Delete data*/}\n                                                    <Controls.Button\n                                                        style={{marginRight: 10, paddingLeft: 20}}\n                                                        size=\"small\"\n                                                        startIcon={<DeleteIcon/>}\n                                                        color=\"error\"\n                                                        onClick={() => {\n                                                            setConfirmDialog({\n                                                                isOpen: true,\n                                                                title: 'Are you sure to delete this record ?',\n                                                                subTitle: \"You can' t undo this operation\",\n                                                                onConfirm: () => {\n                                                                    onDelete(item.id)\n                                                                }\n                                                            })\n                                                        }}>\n                                                        <DeleteIcon fontSize=\"small\"/>\n                                                    </Controls.Button>\n                                                </TableCell> \n                                            : null }\n                                        </TableRow>)\n                                    )\n                                }\n                            </TableBody>\n                        </TblContainer>\n                        <TblPagination/>\n                    </Paper>\n                {/*}*/}\n\n                <Popup\n                    title=\"Customer Form\"\n                    openPopup={openPopup}\n                    setOpenPopup={setOpenPopup}\n                >\n                    <CustomerForm\n                        recordForEdit={recordForEdit}\n                        addOrEdit={addOrEdit}\n                    />\n                </Popup>\n\n                <Notification\n                    notify={notify}\n                    setNotify={setNotify}\n                />\n                <ConfirmDialog\n                    confirmDialog={confirmDialog}\n                    setConfirmDialog={setConfirmDialog}\n                />\n            </>\n        : <div><h1>User Not Found !!!</h1></div>\n    );\n}\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/user/User.js",["190","191","192","193","194","195","196","197","198","199"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport CreateIcon from '@mui/icons-material/Create';\nimport PeopleAltTwoToneIcon from \"@mui/icons-material/PeopleAltTwoTone\";\nimport {ModeEditOutlined} from \"@mui/icons-material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Search from \"@mui/icons-material/Search\"\nimport AddIcon from '@mui/icons-material/Add';\nimport Popup from \"../../components/Popup\";\nimport {makeStyles} from \"@mui/styles\";\nimport {InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar} from \"@mui/material\";\nimport useTable from \"../../components/useTable\"\nimport Controls from \"../../components/controls/Controls\";\nimport Notification from '../../components/Notification'\nimport ConfirmDialog from '../../components/ConfirmDialog'\nimport UserForm from './UserForm';\nimport PageHeader from \"../../components/PageHeader\";\nimport Loader from \"../../components/Loader\";\nimport { base, userApi } from '../../enum/urls';\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\n// const headCells = [\n//     {id: 'supName', label:'Supplier Name'},\n//     {id: 'address1', label:'Address Line 1'},\n//     {id: 'address2', label:'Address Line 2'},\n//     {id: 'address3', label:'Address Line 3'},\n//     {id: 'email', label:'Email'},\n//     {id: 'contact', label:'Contact Numbers', disableSorting: true},\n//     {id: 'actions', label:'Actions', disableSorting: true}\n// ]\n\nexport default function User(props) {\n\n    const {setLoading, user, loading} = props;\n    const [recordForEdit, setRecordForEdit] = useState(null);\n    const classes = useStyles();\n    const [records, setRecords] = useState([]);\n    const [filterFn, setFilterFn] = useState({fn: items => {return items;}})\n    const [openPopup, setOpenPopup] = useState(false);\n    const [notify, setNotify] = useState({isOpen:false, message:'', type:''});\n    const [confirmDialog, setConfirmDialog] = useState({isOpen: false, title:'', subTitle:''})\n\n    const headCells = [\n        {id: 'firstName', label:'First Name'},\n        {id: 'lastName', label:'Last Name'},\n        {id: 'userName', label:'Username'},\n        {id: 'password', label:'Password'},        \n        {id: 'level', label:'Level'},\n        {id: 'contact', label:'Contact Number', disableSorting: true},\n        {id: 'actions', label:'Actions', disableSorting: true},\n    ]\n    \n    useEffect(() => {\n        \n        console.log('user', user.level)\n        if(user.level == 'admin'){ \n            setLoading(true);\n            axios.get(base.baseUrl + userApi.baseUrl + userApi.allUsers)\n            .then((function (response){\n                // console.log(\"response.data\", response.data)\n                setRecords(response.data.data)\n                setLoading(false);\n            }))\n        } else{\n            setLoading(true);\n            axios.get(base.baseUrl + userApi.baseUrl + userApi.userprofile, {params : {userId: user.id}})\n            .then((function (response){\n                console.log(\"response.data\", response.data.data)\n                setRecords(response.data.data)\n                setLoading(false);\n            }))\n        }\n    }, [notify]);\n   \n    const {\n        TblContainer,\n        TblHead,\n        TblPagination,\n        recordsAfterPagingAndSorting\n    } = useTable(records, headCells, filterFn);\n\n    const handleSearch = e => {\n        let target = e.target;\n        setFilterFn({\n            fn: items => {\n                if(target.value == \"\")\n                    return items;\n                else\n                    return items.filter(x => (x.firstName + x.lastName).toLowerCase().includes(target.value.toLowerCase()))\n            }\n        })\n    }\n\n    const addOrEdit = (user, resetForm) => {\n        \n        setLoading(true);\n        if(user.id == 0){\n            // console.log('user', user)\n            axios.post(base.baseUrl + userApi.baseUrl, user)\n            .then(response => {\n                // console.log(\"Status: \", response.status);\n                console.log(\"response.data: \", response.data);\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';               \n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        else{\n            console.log('userput', user)\n            axios.put(base.baseUrl + userApi.baseUrl + user.id, user)\n            .then(response => {\n                console.log(\"Status: \", response.status);\n                console.log(\"Message: \", response);\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';\n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        resetForm();\n        setRecordForEdit(null);\n        setOpenPopup(false);\n    }\n\n    const notification = (open, message, type) =>{\n        setNotify({\n            isOpen: open,\n            message: message,\n            type: type\n        })\n    }\n    \n    const openInPopup = item =>{\n        item.password = '';\n        setRecordForEdit(item)\n        setOpenPopup(true);\n    }\n\n    const onDelete = id => {\n        setConfirmDialog({\n            ...confirmDialog,\n            isOpen: false\n        })\n        setLoading(true);\n        axios.delete(base.baseUrl + userApi.baseUrl+ id)\n        .then(response => {\n            setLoading(false);\n            let type = response.data.status == 200 ? 'success' : 'error';\n            notification(true, response.data.message, type);\n        }).catch(error => {\n            console.log('Something went wrong!', error);\n        });\n    }\n\n    return (\n        user.level && !loading ? \n        <>\n            <PageHeader\n                title=\"User\"\n                subTitle={user.level == 'admin' ? 'View/ Add / Update / Delete Users' : 'Profile' }\n                icon={<PeopleAltTwoToneIcon fontSize=\"large\"/>}\n            />\n                <Paper className={classes.pageContent}>\n                {user.level == 'admin' ?\n                    <Toolbar>\n                        <Controls.Input\n                            className={classes.searchInput}\n                            label=\"Search Users\"\n                            InputProps={{\n                                startAdornment: (<InputAdornment position='start'>\n                                    <Search/>\n                                </InputAdornment>)\n                            }}\n                            onChange={handleSearch}\n                        />\n                         \n                        <Controls.Button\n                            className={classes.newButton}\n                            text=\"Add New\"\n                            variant=\"outlined\"\n                            startIcon={<AddIcon/>}\n                            onClick={() => {\n                                setOpenPopup(true);\n                                setRecordForEdit(null);\n                            }}\n                        /> \n                    </Toolbar>\n                    : null }\n                    <TblContainer>\n                        <TblHead/>\n                        <TableBody>\n                            {\n                                recordsAfterPagingAndSorting().map(item =>\n                                    (<TableRow key={item.id}>\n                                        <TableCell>{item.firstName}</TableCell>\n                                        <TableCell>{item.lastName}</TableCell>\n                                        <TableCell>{item.userName}</TableCell>\n                                        <TableCell>{item.password}</TableCell>\n                                        <TableCell>{item.level}</TableCell>\n                                        <TableCell>{item.contact}</TableCell>\n                                        \n                                            <TableCell>\n                                                {/*Update data*/}\n                                                \n                                                <Controls.Button\n                                                    style={{marginRight: 10, paddingLeft: 20}}\n                                                    size=\"small\"\n                                                    startIcon={<CreateIcon/>}\n                                                    color=\"primary\"\n                                                    onClick={() => {\n                                                        openInPopup(item)\n                                                    }}\n                                                >\n                                                    <ModeEditOutlined fontSize=\"small\"/>\n                                                </Controls.Button>\n                                                \n                                                {/*Delete data*/}\n                                                {user.level == 'admin' ?\n                                                    <Controls.Button\n                                                        style={{marginRight: 10, paddingLeft: 20}}\n                                                        size=\"small\"\n                                                        startIcon={<DeleteIcon/>}\n                                                        color=\"error\"\n                                                        onClick={() => {\n                                                            setConfirmDialog({\n                                                                isOpen: true,\n                                                                title: 'Are you sure to delete this record ?',\n                                                                subTitle: \"You can' t undo this operation\",\n                                                                onConfirm: () => {\n                                                                    onDelete(item.id)\n                                                                }\n                                                            })\n                                                        }}>\n                                                        <DeleteIcon fontSize=\"small\"/>\n                                                    </Controls.Button>\n                                                    : null }\n                                            </TableCell>\n                                        \n                                    </TableRow>)\n                                )\n                            }\n                        </TableBody>\n                    </TblContainer>\n                    <TblPagination/>\n                </Paper>\n            {/*}*/}\n\n            <Loader/>\n\n            <Popup\n                title=\"User Form\"\n                openPopup={openPopup}\n                setOpenPopup={setOpenPopup}\n            >\n                <UserForm\n                    recordForEdit={recordForEdit}\n                    addOrEdit={addOrEdit}\n                />\n            </Popup>\n\n            <Notification\n                notify={notify}\n                setNotify={setNotify}\n            />\n            <ConfirmDialog\n                confirmDialog={confirmDialog}\n                setConfirmDialog={setConfirmDialog}\n            />\n        </> \n        : <div><h1>User Not Found !!!</h1></div>\n    );\n}\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Stock/Stock.js",["200","201","202","203","204","205","206","207","208"],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport CreateIcon from '@mui/icons-material/Create';\nimport PeopleAltTwoToneIcon from \"@mui/icons-material/PeopleAltTwoTone\";\nimport {ModeEditOutlined} from \"@mui/icons-material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Search from \"@mui/icons-material/Search\"\nimport AddIcon from '@mui/icons-material/Add';\nimport Popup from \"../../components/Popup\";\nimport {makeStyles} from \"@mui/styles\";\nimport {InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar} from \"@mui/material\";\nimport useTable from \"../../components/useTable\"\nimport Controls from \"../../components/controls/Controls\";\nimport Notification from '../../components/Notification'\nimport ConfirmDialog from '../../components/ConfirmDialog'\nimport StockForm from \"./StockForm\";\nimport PageHeader from \"../../components/PageHeader\";\nimport Loader from \"../../components/Loader\";\nimport moment from 'moment';\nimport { base, stockApi, supplierApi, itemApi } from '../../enum/urls';\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\n// const headCells = [\n//     {id: 'stockDate', label:'Stock Date'},\n//     {id: 'quantity', label:'Stock Quantity'},\n//     {id: 'supplier', label:'Supplier'},\n//     {id: 'item', label:'Item Name'},\n//     {id: 'actions', label:'Actions', disableSorting: true}\n// ]\n\nexport default function Stock(props) {\n\n    const [disabled, setDisabled] = useState(false);\n    const {setLoading, user, loading} = props;\n    const [recordForEdit, setRecordForEdit] = useState(null);\n    const classes = useStyles();\n    const [records, setRecords] = useState([]);\n    const [supplierOptions, setSupplierOptions] = useState([]);\n    const [itemOptions, setItemOptions] = useState([]);\n    const [filterFn, setFilterFn] = useState({fn: items => {return items;}})\n    const [openPopup, setOpenPopup] = useState(false);\n    const [notify, setNotify] = useState({isOpen:false, message:'', type:''});\n    const [confirmDialog, setConfirmDialog] = useState({isOpen: false, title:'', subTitle:''})\n\n    const headCells = [\n        {id: 'stockDate', label:'Stock Date'},\n        {id: 'quantity', label:'Stock Quantity'},\n        {id: 'supplier', label:'Supplier'},\n        {id: 'item', label:'Item Name'},\n        user.level == 'admin' ? {id: 'actions', label:'Actions', disableSorting: true} : null\n    ]\n\n    useEffect(() => {\n        console.log('useEffect')\n        \n        setLoading(true);\n        axios.get(base.baseUrl + supplierApi.baseUrl + supplierApi.supplierIdNameList)\n        .then((function (response){\n            // console.log(\"setSupplierOptions\", response.data.data)\n            setSupplierOptions(response.data.data)\n            // setLoading(false);\n        }))\n\n        // setLoading(true);\n        axios.get(base.baseUrl + itemApi.baseUrl + itemApi.itemIdNameList)\n        .then((function (response){\n            // console.log(\"setItemOptions\", response.data.data)\n            setItemOptions(response.data.data)\n            // setLoading(false);\n        }))\n\n        // setLoading(true);\n        axios.get(base.baseUrl + stockApi.baseUrl + stockApi.allstocks)\n        .then((function (response){\n            // console.log(\"response.data.data\", response.data.data)\n            setRecords(response.data.data)\n            setLoading(false);\n        }))\n    }, [notify]);\n   \n    const {\n        TblContainer,\n        TblHead,\n        TblPagination,\n        recordsAfterPagingAndSorting\n    } = useTable(records, headCells, filterFn);\n\n    const handleSearch = e => {\n        let target = e.target;        \n        setFilterFn({\n            fn: items => {\n                if(target.value == \"\")\n                    return items;\n                else{\n                    return items.filter(x => (moment(x.stockDate).format('DD/MMM/yyyy')).toLowerCase().includes(target.value.toLowerCase()))\n                }\n            }\n        })\n    }\n\n    const addOrEdit = (stock, resetForm) => {\n        console.log('stock', stock)\n        setLoading(true);\n        if(stock.id == 0){\n            axios.post(base.baseUrl + stockApi.baseUrl, stock)\n            .then(response => {\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';\n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        else{\n            axios.put(base.baseUrl + stockApi.baseUrl + stock.id, stock)\n            .then(response => {\n                setLoading(false);\n                let type = response.data.status == 200 ? 'success' : 'error';\n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n        resetForm();\n        setRecordForEdit(null);\n        setOpenPopup(false);\n        setDisabled(false);\n    }\n\n    const notification = (open, message, type) =>{\n        setNotify({\n            isOpen: open,\n            message: message,\n            type: type\n        })\n    }\n    \n    const openInPopup = item =>{\n        setDisabled(true);\n        setRecordForEdit(item)\n        setOpenPopup(true);\n    }\n\n    // const onDelete = id => {\n    //     setConfirmDialog({\n    //         ...confirmDialog,\n    //         isOpen: false\n    //     })\n    //     setLoading(true);\n\n    //     axios.delete(base.baseUrl + stockApi.baseUrl + id)\n    //     .then(response => {\n    //         setLoading(false);\n    //         let type = response.data.status == 200 ? 'success' : 'error';\n    //         notification(true, response.data.message, type);\n    //     }).catch(error => {\n    //         console.log('Something went wrong!', error);\n    //     });\n    // }\n\n    return (\n        user.level && !loading?\n            <>\n                <PageHeader\n                    title=\"Stock\"\n                    subTitle=\"View/ Add / Update / Delete Stocks\"\n                    icon={<PeopleAltTwoToneIcon fontSize=\"large\"/>}\n                />\n                    <Paper className={classes.pageContent}>\n                        {/*<Paper style={{margin: 'auto', padding: 20, width: '60%'}}>*/}\n\n                        <Toolbar>\n                            <Controls.Input\n                                className={classes.searchInput}\n                                label=\"Search Stocks\"\n                                InputProps={{\n                                    startAdornment: (<InputAdornment position='start'>\n                                        <Search/>\n                                    </InputAdornment>)\n                                }}\n                                onChange={handleSearch}\n                            />\n                            {user.level == 'admin' ?\n                            <Controls.Button\n                                className={classes.newButton}\n                                text=\"Add New\"\n                                variant=\"outlined\"\n                                startIcon={<AddIcon/>}\n                                onClick={() => {\n                                    setOpenPopup(true);\n                                    setRecordForEdit(null);\n                                    setDisabled(false);\n                                }}\n                            /> : null }\n                        </Toolbar>\n                        <TblContainer>\n                            <TblHead/>\n                            <TableBody>\n                                {\n                                    recordsAfterPagingAndSorting().map(item =>\n                                        (<TableRow key={item.id}>\n                                            <TableCell>{moment(item.stockDate).format('DD/MMM/yyyy')}</TableCell>\n                                            {/* <TableCell>{item.stockDate}</TableCell> */}\n                                            <TableCell>{item.quantity}</TableCell>\n                                            <TableCell>{item.supplierName}</TableCell>\n                                            <TableCell>{item.itemName}</TableCell>\n                                            {user.level == 'admin' ?\n                                                <TableCell>\n                                                    {/*Update data*/}\n                                                    <Controls.Button\n                                                        style={{marginRight: 10, paddingLeft: 20}}\n                                                        size=\"small\"\n                                                        startIcon={<CreateIcon/>}\n                                                        color=\"primary\"\n                                                        onClick={() => {\n                                                            openInPopup(item)\n                                                        }}\n                                                    >\n                                                        <ModeEditOutlined fontSize=\"small\"/>\n                                                    </Controls.Button>\n\n                                                    {/*Delete data*/}\n                                                    {/* <Controls.Button\n                                                        style={{marginRight: 10, paddingLeft: 20}}\n                                                        size=\"small\"\n                                                        startIcon={<DeleteIcon/>}\n                                                        color=\"error\"\n                                                        onClick={() => {\n                                                            setConfirmDialog({\n                                                                isOpen: true,\n                                                                title: 'Are you sure to delete this record ?',\n                                                                subTitle: \"You can' t undo this operation\",\n                                                                onConfirm: () => {\n                                                                    onDelete(item.id)\n                                                                }\n                                                            })\n                                                        }}>\n                                                        <DeleteIcon fontSize=\"small\"/>\n                                                    </Controls.Button> */}\n                                                </TableCell>\n                                            : null }\n                                        </TableRow>)\n                                    )\n                                }\n                            </TableBody>\n                        </TblContainer>\n                        <TblPagination/>\n                    </Paper>\n                {/*}*/}\n\n                <Loader/>\n\n                <Popup\n                    title=\"Stock Form\"\n                    openPopup={openPopup}\n                    setOpenPopup={setOpenPopup}\n                >\n                    <StockForm\n                        recordForEdit={recordForEdit}\n                        addOrEdit={addOrEdit}\n                        supplierOptions={supplierOptions}\n                        itemOptions={itemOptions}\n                        setLoading={setLoading}\n                        disabled={disabled}\n                    />\n                </Popup>\n\n                <Notification\n                    notify={notify}\n                    setNotify={setNotify}\n                />\n                <ConfirmDialog\n                    confirmDialog={confirmDialog}\n                    setConfirmDialog={setConfirmDialog}\n                />\n            </>\n        : <div><h1>User Not Found !!!</h1></div>\n    );\n}\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Login/LoginForm.js",["209","210","211","212","213","214","215"],"import React, {useEffect, useState} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport Popup from \"../../components/Popup\";\nimport {Dialog, DialogContent, DialogTitle, Typography} from \"@mui/material\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Notification from '../../components/Notification';\nimport Supplier from '../supplier/Supplier';\n\nconst initialFValues = {\n    userName:'',\n    password:'',\n}\n\nexport default function LoginForm(props) {\n\n    const {setLoading, setUser} = props;\n    const [openPopup, setOpenPopup] = useState(true);\n    const [notify, setNotify] = useState({isOpen:false, message:'', type:''});\n    // const [userId, setUserId] = useState({});\n    const history = useHistory();\n    \n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        if('userName' in fieldValues) {\n            temp.userName = fieldValues.userName ? \"\" : \"This field is required\"\n        }\n        if('password' in fieldValues) {\n            temp.password = fieldValues.password ? \"\" : \"This field is required\"\n        }\n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n        console.log('values', values)\n        if(validate()) {\n            axios.post('http://localhost:8080/api/v1/login', values)\n            .then(response => {\n                let type;\n                console.log(\"response.data: \", response.data.data);\n                \n                \n                if(response.data.status == 200){\n                    type = 'success';\n                    setUser(response.data.data);\n                    setLoading(false);\n                    setOpenPopup(false)\n                } else{\n                    type = 'error';\n                }\n                              \n                notification(true, response.data.message, type);\n            }).catch(error => {\n                console.log('Something went wrong!', error);\n            });\n        }\n    }\n\n    const notification = (open, message, type) =>{\n        setNotify({\n            isOpen: open,\n            message: message,\n            type: type\n        })\n    }\n    \n    useEffect(() =>{\n        \n        if(!openPopup){\n            // {console.log('useEffect Login')}\n            // console.log('user', userId)\n            history.push(\"/supplier\");\n        }\n    }, [notify])\n\n    return (\n        <>\n            <Dialog open={openPopup}>\n                <DialogTitle>\n                    <div style={{textAlign:'center'}}>\n                        <Typography variant=\"h4\" component=\"div\">\n                            {'Login'}\n                        </Typography>\n                        \n                    </div>\n                </DialogTitle>\n                <DialogContent dividers>\n                <Form onSubmit={handleSubmit}>\n                    <div style={{textAlign:'center'}}>\n                    <Grid container direction=\"row\">\n                        <Grid item xs={12} >\n                            <Controls.Input\n                                name=\"userName\"\n                                label=\"Enter Username\"\n                                value={values.userName}\n                                onChange={handleInputChange}\n                                error={errors.userName}\n                            />\n\n                            <Controls.Input\n                                name=\"password\"\n                                label=\"Enter Password\"\n                                value={values.password}\n                                onChange={handleInputChange}\n                                error={errors.password}\n                                type={'password'}\n                            />\n                            <Controls.Button\n                                style={{marginLeft: 10}}\n                                type=\"submit\"\n                                text=\"Submit\"\n                            />\n\n                            <Controls.Button\n                                style={{marginLeft: 10}}\n                                color=\"inherit\"\n                                text=\"Reset\"\n                                onClick={resetForm}\n                            />\n                        </Grid>\n                        {/* <Grid item xs={6}>\n                            <Controls.Button\n                                style={{marginLeft: 10}}\n                                type=\"submit\"\n                                text=\"Submit\"\n                            />\n\n                            <Controls.Button\n                                style={{marginLeft: 10}}\n                                color=\"inherit\"\n                                text=\"Reset\"\n                                onClick={resetForm}\n                            />\n                        </Grid> */}\n                    </Grid>\n                    </div>\n                </Form>\n                </DialogContent>\n            </Dialog>\n\n            <Notification\n                notify={notify}\n                setNotify={setNotify}\n            />\n        </>\n            \n        \n    );\n}\n\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/NavBarElements.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/useTable.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/Popup.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/PageHeader.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/Notification.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Item/ItemForm.js",["216","217","218"],"import React, {useEffect} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \"../../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\n\nconst initialFValues = {\n    id: 0,\n    name: '',\n    price:'',\n    quantity: 0,\n    warranty:'',\n}\n\nexport default function ItemForm(props) {\n\n    const {addOrEdit, recordForEdit} = props\n\n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        if('name' in fieldValues) {\n            temp.name = fieldValues.name ? \"\" : \"This field is required\"\n        }\n        if('price' in fieldValues) {\n            temp.price = fieldValues.price ? \"\" : \"This field is required\"\n        }\n        \n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        if(validate()) {\n            addOrEdit(values, resetForm);\n        }\n    }\n\n    useEffect(() =>{\n        if(recordForEdit != null){\n            setValues({\n                ...recordForEdit\n            })\n        }\n    }, [recordForEdit])\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Grid container>\n                <Grid \n                container\n                direction=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                style={{width:'400px'}}\n                >\n                    <Controls.Input\n                        name=\"name\"\n                        label=\"Item Name\"\n                        value={values.name}\n                        onChange={handleInputChange}\n                        error={errors.name}\n                    />\n\n                    <Controls.Input\n                        name=\"price\"\n                        label=\"Item Price\"\n                        value={values.price}\n                        onChange={handleInputChange}\n                        error={errors.price}\n                    />\n\n                    <Controls.Input\n                        name=\"quantity\"\n                        label=\"Item Quantity\"\n                        value={values.quantity}\n                        onChange={handleInputChange} \n                        error={errors.quantity}\n                    />\n\n                    <Controls.Input\n                        name=\"warranty\"\n                        label=\"Item warranty (months)\"\n                        value={values.warranty}\n                        onChange={handleInputChange} \n                        error={errors.warranty}\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        type=\"submit\"\n                        text=\"Submit\"\n                    />  \n\n                    <Controls.Button\n                        style={{marginLeft: 10, marginTop: 10}}\n                        color=\"inherit\"\n                        text=\"Reset\"\n                        onClick={resetForm}\n                    />\n                </Grid>\n            \n            </Grid>\n        </Form>\n    );\n}\n\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/ConfirmDialog.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Invoice/ViewDetail.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Invoice/InvoiceForm.js",["219","220","221","222","223","224","225","226"],"import React, {useState} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport {Paper, TableBody, TableCell, TableRow} from \"@mui/material\";\nimport {makeStyles} from \"@mui/styles\";\nimport useTable from \"../../components/useTable\"\n\nconst initialFValues = {\n    id: 0,\n    customerId: '',\n    customerName: '',\n    itemId:'',\n    itemName:'',\n    quantity:'',\n    amount:'',\n    availableQty:'',\n    userId:'',\n}\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\nconst headCells = [\n    {id: 'itemName', label:'Item Name'},\n    {id: 'quantity', label:'Quantity'},\n    {id: 'amount', label:'Amount'},\n]\n\nexport default function InvoiceForm(props) {\n\n    // const classes = useStyles();\n    const {addOrEdit, addToTable, recordList, customerOptions, itemOptions, itemQty} = props\n    const [disableCustomer, setDisableCustomer] = useState(false);\n    const [disableSubmit, setDisableSubmit] = useState(true);\n    const [filterFn] = useState({fn: items => {return items;}})\n    // console.log('itemQty', itemQty)\n\n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        \n        if(recordList.length == 0){\n            if('customerId' in fieldValues) {\n                temp.customerId = fieldValues.customerId ? \"\" : \"This field is required\"\n            }\n        }\n        if('itemId' in fieldValues) {\n            temp.itemId = fieldValues.itemId ? \"\" : \"This field is required\"\n        }\n        if('quantity' in fieldValues) {\n            temp.quantity = fieldValues.quantity ? \"\" : fieldValues.quantity < 0 ? \"Invalid Quantity\" : \"\"\n        }\n        if('availableQty' in fieldValues) {\n            temp.quantity = values.quantity <= values.availableQty ? \"\" : \"Invalid Quantityy\"\n        }\n        if('amount' in fieldValues) {\n            temp.amount = fieldValues.amount ? \"\" : \"Invalid Amount\"\n        }\n        setErrors({\n            ...temp\n        })\n        \n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        TblContainer,\n        TblHead,\n        TblPagination,\n        recordsAfterPagingAndSorting\n    } = useTable(recordList, headCells, filterFn);\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        console.log('recordList', recordList)\n        addOrEdit(recordList, resetForm);\n    }\n\n    const setQty = e => {\n        if(values.itemId){\n            let qty = itemQty.filter( function (i) {\n                return i.id == values.itemId;\n            })[0].quantity;\n\n            values.availableQty = qty;\n        }\n    }\n\n    const setPrice = e => {\n        if(values.itemId && values.quantity && values.quantity > 0) {\n            let price = itemQty.filter( function (i) {\n                return i.id == values.itemId;\n            })[0].price;\n\n            values.amount = values.quantity * price;\n        } \n    }\n\n    const addValue = e =>{\n        if(validate()){\n            addToTable(values, resetForm);\n            setDisableSubmit(false);\n            setDisableCustomer(true);\n        }\n    }\n\n    // useEffect(() =>{\n    //     if(recordForEdit != null){\n    //         setValues({\n    //             ...recordForEdit\n    //         })\n    //     }\n    // }, [recordForEdit])\n    // console.log('values.itemId', values.itemId)\n    return (\n        <Paper>\n        <Form onSubmit={handleSubmit}>\n            <Grid container direction=\"row\">\n                <Grid item xs={8}>\n                <Controls.Select\n                        name=\"customerId\"\n                        label=\"Select Customer\"\n                        options={customerOptions}\n                        value={recordList.length > 0 ? recordList[0].customerId : values.customerId}\n                        onChange={handleInputChange}\n                        error={errors.customerId}\n                        disabled={disableCustomer}\n                        error={errors.customerId}\n                    />\n\n                    <Controls.Select\n                        name=\"itemId\"\n                        label=\"Select Item\"\n                        options={itemOptions}\n                        value={values.itemId}\n                        onChange={handleInputChange}\n                        error={errors.itemId}\n                        onClick={setQty()}\n                    />\n\n                    <Controls.Input\n                        name=\"availableQty\"\n                        label=\"Available Quantity\"\n                        value={values.availableQty}\n                        onChange={handleInputChange}\n                        type='number'\n                        error={errors.availableQty}\n                        disabled={true}\n                    />\n\n                    <Controls.Input\n                        name=\"quantity\"\n                        label=\"Quantity\"\n                        value={values.quantity}\n                        onChange={handleInputChange}\n                        type='number'\n                        error={errors.quantity}\n                        onClick={setPrice()}\n                    />\n\n                    <Controls.Input\n                        name=\"amount\"\n                        label=\"Amount\"\n                        value={values.amount}\n                        onChange={handleInputChange}\n                        type='number'\n                        error={errors.amount}\n                    />\n                </Grid>\n                \n                <Grid item xs={4}>\n                    <Controls.Button\n                        style={{margin: 10, marginTop:'70px', maxWidth: '60px', minWidth: '100px'}}\n                        text=\"Add\"\n                        onClick={addValue}\n                    />\n                    <Controls.Button\n                        style={{margin: 10}}\n                        color=\"error\"\n                        onClick={handleSubmit}\n                        text=\"Submit\"\n                        disabled={disableSubmit}\n                    />\n\n                    <Controls.Button\n                        style={{margin: 10, maxWidth: '60px', minWidth: '100px'}}\n                        color=\"inherit\"\n                        text=\"Reset\"\n                        onClick={resetForm}\n                    />\n                </Grid>\n            </Grid>\n        </Form>\n        {recordList.length > 0 ? \n        <TblContainer>\n            <TblHead/>\n            <TableBody>\n                {   \n                    recordsAfterPagingAndSorting().map(item =>\n                        (<TableRow key={item.id}>\n                            <TableCell>{item.itemName}</TableCell>\n                            <TableCell>{item.quantity}</TableCell>\n                            <TableCell>{item.amount}</TableCell>\n                        </TableRow>)\n                    )\n                }\n            </TableBody>\n            </TblContainer>\n        : null }\n        {recordList.length > 0 ? <TblPagination/> : null }\n        </Paper>\n        \n    );\n}\n\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/supplier/SupplierForm.js",["227","228","229","230"],"import React, {useEffect} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\n\nconst initialFValues = {\n    id: 0,\n    supName: '',\n    address1:'',\n    address2:'',\n    address3:'',\n    email:'',\n    contact:'',\n    gender:'male',\n    departmentId:'',\n}\n\nexport default function SupplierForm(props) {\n\n    const {addOrEdit, recordForEdit} = props\n\n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        if('supName' in fieldValues) {\n            temp.supName = fieldValues.supName ? \"\" : \"This field is required\"\n        }\n        if('contact' in fieldValues) {\n            temp.contact = fieldValues.contact.length == 10 ? \"\" : \"This field is required\"\n        }\n        if('email' in fieldValues) {\n            temp.email = (/$^|.+@.+..+/).test(values.email) ? \"\" : \"Email is not valid\"\n        }\n        // if('departmentId' in fieldValues) {\n        //     temp.departmentId = values.departmentId.length != 0 ? \"\" : \"Thid field is required\"\n        // }\n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        if(validate()) {\n            addOrEdit(values, resetForm);\n        }\n    }\n\n    useEffect(() =>{\n        if(recordForEdit != null){\n            setValues({\n                ...recordForEdit\n            })\n        }\n    }, [recordForEdit])\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Grid container direction=\"row\">\n                <Grid item xs={6}>\n                    <Controls.Input\n                        name=\"supName\"\n                        label=\"Supplier Name\"\n                        value={values.supName}\n                        onChange={handleInputChange}\n                        error={errors.supName}\n                    />\n\n                    <Controls.Input\n                        name=\"address1\"\n                        label=\"Address Line 1\"\n                        value={values.address1}\n                        onChange={handleInputChange}\n                    />\n\n                    <Controls.Input\n                        name=\"address2\"\n                        label=\"Address Line 2\"\n                        value={values.address2}\n                        onChange={handleInputChange}\n                    />\n\n                    <Controls.Input\n                        name=\"address3\"\n                        label=\"Address Line 3\"\n                        value={values.address3}\n                        onChange={handleInputChange}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <Controls.Input\n                        name=\"email\"\n                        label=\"Email\"\n                        value={values.email}\n                        onChange={handleInputChange}\n                        error={errors.email}\n                    />\n\n                    <Controls.Input\n                        name=\"contact\"\n                        label=\"Contact Number\"\n                        value={values.contact}\n                        onChange={handleInputChange}\n                        error={errors.contact}\n                        type='number'\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        type=\"submit\"\n                        text=\"Submit\"\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        color=\"inherit\"\n                        text=\"Reset\"\n                        onClick={resetForm}\n                    />\n                </Grid>\n            </Grid>\n        </Form>\n    );\n}\n\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/customer/CustomerForm.js",["231","232","233","234"],"import React, {useEffect} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \"../../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\n\nconst initialFValues = {\n    id: 0,\n    firstName: '',\n    lastName: '',\n    address1:'',\n    address2:'',\n    address3:'',\n    email:'',\n    contact:''\n}\n\nexport default function CustomerForm(props) {\n\n    const {addOrEdit, recordForEdit} = props\n\n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        if('firstName' in fieldValues) {\n            temp.firstName = fieldValues.firstName ? \"\" : \"This field is required\"\n        }\n        if('contact' in fieldValues) {\n            temp.contact = fieldValues.contact.length == 10 ? \"\" : \"Invalid Contact Number\"\n        }\n        if('email' in fieldValues) {\n            temp.email = (/$^|.+@.+..+/).test(values.email) ? \"\" : \"Email is not valid\"\n        }\n        // if('departmentId' in fieldValues) {\n        //     temp.departmentId = values.departmentId.length != 0 ? \"\" : \"Thid field is required\"\n        // }\n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        if(validate()) {\n            addOrEdit(values, resetForm);\n        }\n    }\n\n    useEffect(() =>{\n        if(recordForEdit != null){\n            setValues({\n                ...recordForEdit\n            })\n        }\n    }, [recordForEdit])\n\n    return (\n        <Form onSubmit={handleSubmit} style={{ overflow: \"hidden\" }}>\n            <Grid container direction=\"row\">\n                <Grid item xs={6}>\n                    <Controls.Input\n                        name=\"firstName\"\n                        label=\"First Name\"\n                        value={values.firstName}\n                        onChange={handleInputChange}\n                        error={errors.firstName}\n                    />\n\n                    <Controls.Input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        value={values.lastName}\n                        onChange={handleInputChange}\n                        error={errors.lastName}\n                    />\n\n                    <Controls.Input\n                        name=\"email\"\n                        label=\"Email\"\n                        value={values.email}\n                        onChange={handleInputChange}\n                        error={errors.email}\n                    />\n\n                    <Controls.Input\n                        name=\"contact\"\n                        label=\"Contact Number\"\n                        value={values.contact}\n                        onChange={handleInputChange}\n                        error={errors.contact}\n                        type='number'\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    \n                    <Controls.Input\n                        name=\"address1\"\n                        label=\"Address Line 1\"\n                        value={values.address1}\n                        onChange={handleInputChange}\n                    />\n\n                    <Controls.Input\n                        name=\"address2\"\n                        label=\"Address Line 2\"\n                        value={values.address2}\n                        onChange={handleInputChange}\n                    />\n\n                    <Controls.Input\n                        name=\"address3\"\n                        label=\"Address Line 3\"\n                        value={values.address3}\n                        onChange={handleInputChange}\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        type=\"submit\"\n                        text=\"Submit\"\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        color=\"inherit\"\n                        text=\"Reset\"\n                        onClick={resetForm}\n                    />\n                </Grid>\n            </Grid>\n        </Form>\n    );\n}\n\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/useForm.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/Stock/StockForm.js",["235","236","237"],"import React, {useEffect} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \"../../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\n\nconst initialFValues = {\n    id: 0,\n    stockDate: new Date(),\n    quantity:0,\n    supplierId:'',\n    supplierName:'',\n    itemId:'',\n    itemName:'',\n    // itemId:''\n}\n\nexport default function StockForm(props) {\n\n    const {addOrEdit, recordForEdit, supplierOptions, itemOptions, disabled} = props\n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        if('stockDate' in fieldValues) {\n            temp.stockDate = fieldValues.stockDate ? \"\" : \"This field is required\"\n        }\n        if('quantity' in fieldValues) {\n            temp.quantity = fieldValues.quantity ? \"\" : \"This field is required\"\n        }\n        if('supplierId' in fieldValues) {\n            temp.supplierId = fieldValues.supplierId ? \"\" : \"This field is required\"\n        }\n        if('itemId' in fieldValues) {\n            temp.itemId = fieldValues.itemId ? \"\" : \"This field is required\"\n        }\n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        if(validate()) {\n            addOrEdit(values, resetForm);\n        }\n    }\n\n    useEffect(() =>{\n        if(recordForEdit != null){\n            setValues({\n                ...recordForEdit\n            })\n        }\n    }, [recordForEdit])\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Grid container direction=\"row\">\n                <Grid item xs={6}>\n                    <Controls.DatePicker\n                        name=\"stockDate\"\n                        label=\"Select Stock Date\"\n                        value={values.stockDate}\n                        onChange={handleInputChange}\n                        error={errors.stockDate}\n                    />\n\n                    <Controls.Input\n                        name=\"quantity\"\n                        label=\"Enter Stock Quantity\"\n                        value={values.quantity}\n                        onChange={handleInputChange}\n                        error={errors.quantity}\n                        disabled={disabled}\n                        type='number'\n                    />\n\n                    <Controls.Select\n                        name=\"supplierId\"\n                        label=\"Select Supplier\"\n                        options={supplierOptions}\n                        value={values.supplierId}\n                        onChange={handleInputChange}\n                        error={errors.supplierId}\n                        disabled={disabled}\n                    />\n\n                    <Controls.Select\n                        name=\"itemId\"\n                        label=\"Select Item\"\n                        options={itemOptions}\n                        value={values.itemId}\n                        onChange={handleInputChange}\n                        error={errors.itemId}\n                        disabled={disabled}\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        type=\"submit\"\n                        text=\"Submit\"\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        color=\"inherit\"\n                        text=\"Reset\"\n                        onClick={resetForm}\n                    />\n                </Grid>\n            </Grid>\n        </Form>\n    );\n}\n\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/Controls.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/enum/urls.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/pages/user/UserForm.js",["238","239","240","241"],"import React, {useEffect} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\n\nconst initialFValues = {\n    id: 0,\n    firstName: '',\n    lastName:'',\n    userName:'',\n    password:'',\n    level:'user',\n    contact:''\n}\n\nconst levelValues = [\n    {id: 'admin', title: 'Admin'},\n    {id: 'user', title: 'User'},\n]\n\nexport default function SupplierForm(props) {\n\n    const {addOrEdit, recordForEdit} = props\n\n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        if('firstName' in fieldValues) {\n            temp.firstName = fieldValues.firstName ? \"\" : \"This field is required\"\n        }\n        if('userName' in fieldValues) {\n            temp.userName = fieldValues.userName.length >= 4 ? \"\" : \"Invalid Username\"\n        }\n        if('password' in fieldValues) {\n            temp.password = fieldValues.password.length >= 4 ? \"\" : \"Invalid Password\"\n        }\n        if('contact' in fieldValues) {\n            temp.contact = fieldValues.contact.length == 10 ? \"\" : \"Invalid Contact Number\"\n        }\n        if('level' in fieldValues) {\n            temp.level = fieldValues.level ? \"\" : \"This field is required\"\n        }\n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        if(validate()) {\n            addOrEdit(values, resetForm);\n        }\n    }\n\n    useEffect(() =>{\n        if(recordForEdit != null){\n            setValues({\n                ...recordForEdit\n            })\n        }\n    }, [recordForEdit])\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Grid container direction=\"row\">\n                <Grid item xs={6}>\n                    <Controls.Input\n                        name=\"firstName\"\n                        label=\"First Name\"\n                        value={values.firstName}\n                        onChange={handleInputChange}\n                        error={errors.firstName}\n                    />\n\n                    <Controls.Input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        value={values.lastName}\n                        onChange={handleInputChange}\n                    />\n\n                    <Controls.Input\n                        name=\"userName\"\n                        label=\"UserName (Min: 4 Characters)\"\n                        value={values.userName}\n                        onChange={handleInputChange}\n                        disabled={recordForEdit ? true : false}\n                        error={errors.userName}\n                    />\n\n                    <Controls.Input\n                        name=\"password\"\n                        label=\"Password (Min: 4 Characters)\"\n                        value={values.password}\n                        onChange={handleInputChange}\n                        error={errors.password}\n                    />\n                </Grid>\n\n                <Grid item xs={6}>\n                    <Controls.Input\n                        name=\"contact\"\n                        label=\"Contact Number\"\n                        value={values.contact}\n                        onChange={handleInputChange}\n                        error={errors.contact}\n                        type='number'\n                    />\n\n                    <Controls.RadioGroup\n                        name=\"level\"\n                        label=\"User Level\"\n                        value={values.level}\n                        onChange={handleInputChange}\n                        items={levelValues}\n                        error={errors.level}\n                    />\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        type=\"submit\"\n                        text=\"Submit\"\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        color=\"inherit\"\n                        text=\"Reset\"\n                        onClick={resetForm}\n                    />\n                </Grid>\n            </Grid>\n        </Form>\n    );\n}\n\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/RadioGroup.js",["242"],"import React from 'react';\nimport {FormControl, FormLabel, FormHelperText, Radio, RadioGroup as MuiRadioGroup} from \"@mui/material\";\nimport { FormControlLabel } from '@material-ui/core';\n\nexport default function RadioGroup(props) {\n\n    const{name, label, value , error = null, onChange, items, disabled, ...other} = props\n\n    return (\n        <FormControl>\n            <FormLabel>{label}</FormLabel>\n            <MuiRadioGroup row\n                name={name}\n                value={value}\n                onChange={onChange}>\n                {\n                    items.map(\n                        (item, index) => (\n                            <FormControlLabel value={item.id} control={<Radio/>} label={item.title}/>\n                        )\n                    )\n                }\n            </MuiRadioGroup>\n            {error && <FormHelperText style={{color:'red'}}>{error}</FormHelperText>}\n        </FormControl>\n        \n    );\n}","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/ActionButton.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/Input.js",["243","244"],"import React from 'react';\nimport {TextField} from \"@mui/material\";\n\nexport default function Input(props) {\n\n    const{name, label, value , error = null, onChange, disabled, type, ...other} = props\n\n    return (\n        <TextField\n            disabled={disabled ? true : false}\n            variant=\"outlined\"\n            name={name}\n            label={label}\n            value={value}\n            onChange={onChange}\n            type={type == 'password' ? 'password' : type == 'number' ? 'number' : 'text'}\n            {...other}\n            {...(error && {error:true, helperText:error})}\n        />\n    );\n}\n","/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/Select.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/DatePicker.js",[],"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/src/components/controls/Button.js",[],{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","severity":1,"message":"250","line":14,"column":10,"nodeType":"251","messageId":"252","endLine":14,"endColumn":20},{"ruleId":"253","severity":1,"message":"254","line":40,"column":31,"nodeType":"255","messageId":"256","endLine":40,"endColumn":33},{"ruleId":"253","severity":1,"message":"254","line":60,"column":20,"nodeType":"255","messageId":"256","endLine":60,"endColumn":22},{"ruleId":"257","severity":1,"message":"258","line":73,"column":8,"nodeType":"259","endLine":73,"endColumn":16,"suggestions":"260"},{"ruleId":"253","severity":1,"message":"254","line":86,"column":33,"nodeType":"255","messageId":"256","endLine":86,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":97,"column":20,"nodeType":"255","messageId":"256","endLine":97,"endColumn":22},{"ruleId":"253","severity":1,"message":"254","line":101,"column":49,"nodeType":"255","messageId":"256","endLine":101,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":112,"column":49,"nodeType":"255","messageId":"256","endLine":112,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":145,"column":45,"nodeType":"255","messageId":"256","endLine":145,"endColumn":47},{"ruleId":"253","severity":1,"message":"254","line":175,"column":41,"nodeType":"255","messageId":"256","endLine":175,"endColumn":43},{"ruleId":"253","severity":1,"message":"254","line":197,"column":57,"nodeType":"255","messageId":"256","endLine":197,"endColumn":59},{"ruleId":"257","severity":1,"message":"258","line":104,"column":8,"nodeType":"259","endLine":104,"endColumn":16,"suggestions":"261"},{"ruleId":"253","severity":1,"message":"254","line":117,"column":33,"nodeType":"255","messageId":"256","endLine":117,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":148,"column":31,"nodeType":"255","messageId":"256","endLine":148,"endColumn":33},{"ruleId":"253","severity":1,"message":"254","line":152,"column":28,"nodeType":"255","messageId":"256","endLine":152,"endColumn":30},{"ruleId":"253","severity":1,"message":"254","line":64,"column":20,"nodeType":"255","messageId":"256","endLine":64,"endColumn":22},{"ruleId":"257","severity":1,"message":"258","line":76,"column":8,"nodeType":"259","endLine":76,"endColumn":16,"suggestions":"262"},{"ruleId":"253","severity":1,"message":"254","line":89,"column":33,"nodeType":"255","messageId":"256","endLine":89,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":99,"column":24,"nodeType":"255","messageId":"256","endLine":99,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":105,"column":49,"nodeType":"255","messageId":"256","endLine":105,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":117,"column":49,"nodeType":"255","messageId":"256","endLine":117,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":150,"column":45,"nodeType":"255","messageId":"256","endLine":150,"endColumn":47},{"ruleId":"253","severity":1,"message":"254","line":177,"column":37,"nodeType":"255","messageId":"256","endLine":177,"endColumn":39},{"ruleId":"253","severity":1,"message":"254","line":201,"column":53,"nodeType":"255","messageId":"256","endLine":201,"endColumn":55},{"ruleId":"253","severity":1,"message":"254","line":65,"column":20,"nodeType":"255","messageId":"256","endLine":65,"endColumn":22},{"ruleId":"257","severity":1,"message":"258","line":78,"column":8,"nodeType":"259","endLine":78,"endColumn":16,"suggestions":"263"},{"ruleId":"253","severity":1,"message":"254","line":91,"column":33,"nodeType":"255","messageId":"256","endLine":91,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":101,"column":24,"nodeType":"255","messageId":"256","endLine":101,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":107,"column":49,"nodeType":"255","messageId":"256","endLine":107,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":120,"column":49,"nodeType":"255","messageId":"256","endLine":120,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":185,"column":41,"nodeType":"255","messageId":"256","endLine":185,"endColumn":43},{"ruleId":"253","severity":1,"message":"254","line":210,"column":57,"nodeType":"255","messageId":"256","endLine":210,"endColumn":59},{"ruleId":"253","severity":1,"message":"254","line":70,"column":23,"nodeType":"255","messageId":"256","endLine":70,"endColumn":25},{"ruleId":"257","severity":1,"message":"264","line":87,"column":8,"nodeType":"259","endLine":87,"endColumn":16,"suggestions":"265"},{"ruleId":"253","severity":1,"message":"254","line":100,"column":33,"nodeType":"255","messageId":"256","endLine":100,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":111,"column":20,"nodeType":"255","messageId":"256","endLine":111,"endColumn":22},{"ruleId":"253","severity":1,"message":"254","line":118,"column":49,"nodeType":"255","messageId":"256","endLine":118,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":131,"column":49,"nodeType":"255","messageId":"256","endLine":131,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":165,"column":45,"nodeType":"255","messageId":"256","endLine":165,"endColumn":47},{"ruleId":"253","severity":1,"message":"254","line":177,"column":38,"nodeType":"255","messageId":"256","endLine":177,"endColumn":40},{"ruleId":"253","severity":1,"message":"254","line":181,"column":29,"nodeType":"255","messageId":"256","endLine":181,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":235,"column":61,"nodeType":"255","messageId":"256","endLine":235,"endColumn":63},{"ruleId":"249","severity":1,"message":"266","line":6,"column":8,"nodeType":"251","messageId":"252","endLine":6,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":64,"column":20,"nodeType":"255","messageId":"256","endLine":64,"endColumn":22},{"ruleId":"257","severity":1,"message":"258","line":93,"column":8,"nodeType":"259","endLine":93,"endColumn":16,"suggestions":"267"},{"ruleId":"253","severity":1,"message":"254","line":106,"column":33,"nodeType":"255","messageId":"256","endLine":106,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":118,"column":21,"nodeType":"255","messageId":"256","endLine":118,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":122,"column":49,"nodeType":"255","messageId":"256","endLine":122,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":132,"column":49,"nodeType":"255","messageId":"256","endLine":132,"endColumn":51},{"ruleId":"253","severity":1,"message":"254","line":197,"column":41,"nodeType":"255","messageId":"256","endLine":197,"endColumn":43},{"ruleId":"253","severity":1,"message":"254","line":221,"column":57,"nodeType":"255","messageId":"256","endLine":221,"endColumn":59},{"ruleId":"249","severity":1,"message":"268","line":5,"column":8,"nodeType":"251","messageId":"252","endLine":5,"endColumn":13},{"ruleId":"249","severity":1,"message":"269","line":10,"column":8,"nodeType":"251","messageId":"252","endLine":10,"endColumn":16},{"ruleId":"253","severity":1,"message":"254","line":36,"column":24,"nodeType":"255","messageId":"256","endLine":36,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":37,"column":53,"nodeType":"255","messageId":"256","endLine":37,"endColumn":55},{"ruleId":"249","severity":1,"message":"270","line":43,"column":9,"nodeType":"251","messageId":"252","endLine":43,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":60,"column":41,"nodeType":"255","messageId":"256","endLine":60,"endColumn":43},{"ruleId":"257","severity":1,"message":"271","line":91,"column":8,"nodeType":"259","endLine":91,"endColumn":16,"suggestions":"272"},{"ruleId":"253","severity":1,"message":"254","line":30,"column":24,"nodeType":"255","messageId":"256","endLine":30,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":31,"column":53,"nodeType":"255","messageId":"256","endLine":31,"endColumn":55},{"ruleId":"257","severity":1,"message":"273","line":58,"column":8,"nodeType":"259","endLine":58,"endColumn":23,"suggestions":"274"},{"ruleId":"249","severity":1,"message":"275","line":21,"column":7,"nodeType":"251","messageId":"252","endLine":21,"endColumn":16},{"ruleId":"253","severity":1,"message":"254","line":54,"column":30,"nodeType":"255","messageId":"256","endLine":54,"endColumn":32},{"ruleId":"253","severity":1,"message":"254","line":75,"column":24,"nodeType":"255","messageId":"256","endLine":75,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":76,"column":53,"nodeType":"255","messageId":"256","endLine":76,"endColumn":55},{"ruleId":"249","severity":1,"message":"270","line":89,"column":9,"nodeType":"251","messageId":"252","endLine":89,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":104,"column":29,"nodeType":"255","messageId":"256","endLine":104,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":114,"column":29,"nodeType":"255","messageId":"256","endLine":114,"endColumn":31},{"ruleId":"276","severity":1,"message":"277","line":150,"column":25,"nodeType":"278","messageId":"279","endLine":150,"endColumn":50},{"ruleId":"253","severity":1,"message":"254","line":28,"column":55,"nodeType":"255","messageId":"256","endLine":28,"endColumn":57},{"ruleId":"253","severity":1,"message":"254","line":39,"column":24,"nodeType":"255","messageId":"256","endLine":39,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":40,"column":53,"nodeType":"255","messageId":"256","endLine":40,"endColumn":55},{"ruleId":"257","severity":1,"message":"273","line":67,"column":8,"nodeType":"259","endLine":67,"endColumn":23,"suggestions":"280"},{"ruleId":"253","severity":1,"message":"254","line":27,"column":55,"nodeType":"255","messageId":"256","endLine":27,"endColumn":57},{"ruleId":"253","severity":1,"message":"254","line":38,"column":24,"nodeType":"255","messageId":"256","endLine":38,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":39,"column":53,"nodeType":"255","messageId":"256","endLine":39,"endColumn":55},{"ruleId":"257","severity":1,"message":"273","line":66,"column":8,"nodeType":"259","endLine":66,"endColumn":23,"suggestions":"281"},{"ruleId":"253","severity":1,"message":"254","line":37,"column":24,"nodeType":"255","messageId":"256","endLine":37,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":38,"column":53,"nodeType":"255","messageId":"256","endLine":38,"endColumn":55},{"ruleId":"257","severity":1,"message":"273","line":65,"column":8,"nodeType":"259","endLine":65,"endColumn":23,"suggestions":"282"},{"ruleId":"253","severity":1,"message":"254","line":37,"column":55,"nodeType":"255","messageId":"256","endLine":37,"endColumn":57},{"ruleId":"253","severity":1,"message":"254","line":45,"column":24,"nodeType":"255","messageId":"256","endLine":45,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":46,"column":53,"nodeType":"255","messageId":"256","endLine":46,"endColumn":55},{"ruleId":"257","severity":1,"message":"273","line":73,"column":8,"nodeType":"259","endLine":73,"endColumn":23,"suggestions":"283"},{"ruleId":"249","severity":1,"message":"284","line":7,"column":76,"nodeType":"251","messageId":"252","endLine":7,"endColumn":81},{"ruleId":"253","severity":1,"message":"254","line":16,"column":24,"nodeType":"255","messageId":"256","endLine":16,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":16,"column":58,"nodeType":"255","messageId":"256","endLine":16,"endColumn":60},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array.","ArrayExpression",["287"],["288"],["289"],["290"],"React Hook useEffect has missing dependencies: 'setLoading', 'user.id', and 'user.level'. Either include them or remove the dependency array.",["291"],"'DeleteIcon' is defined but never used.",["292"],"'Popup' is defined but never used.","'Supplier' is defined but never used.","'setValues' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'openPopup'. Either include them or remove the dependency array.",["293"],"React Hook useEffect has a missing dependency: 'setValues'. Either include it or remove the dependency array.",["294"],"'useStyles' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",["295"],["296"],["297"],["298"],"'other' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"299","fix":"300"},{"desc":"299","fix":"301"},{"desc":"299","fix":"302"},{"desc":"299","fix":"303"},{"desc":"304","fix":"305"},{"desc":"299","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"309","fix":"311"},{"desc":"309","fix":"312"},{"desc":"309","fix":"313"},{"desc":"309","fix":"314"},"Update the dependencies array to be: [notify, setLoading]",{"range":"315","text":"316"},{"range":"317","text":"316"},{"range":"318","text":"316"},{"range":"319","text":"316"},"Update the dependencies array to be: [notify, setLoading, user.id, user.level]",{"range":"320","text":"321"},{"range":"322","text":"316"},"Update the dependencies array to be: [history, notify, openPopup]",{"range":"323","text":"324"},"Update the dependencies array to be: [recordForEdit, setValues]",{"range":"325","text":"326"},{"range":"327","text":"326"},{"range":"328","text":"326"},{"range":"329","text":"326"},{"range":"330","text":"326"},[2703,2711],"[notify, setLoading]",[4003,4011],[2961,2969],[3025,3033],[3347,3355],"[notify, setLoading, user.id, user.level]",[3557,3565],[2791,2799],"[history, notify, openPopup]",[1340,1355],"[recordForEdit, setValues]",[1735,1750],[1718,1733],[1727,1742],[1901,1916]]