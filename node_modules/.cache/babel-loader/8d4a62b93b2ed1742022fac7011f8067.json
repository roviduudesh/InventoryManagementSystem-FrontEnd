{"ast":null,"code":"var _jsxFileName = \"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/inventory-frontend/src/pages/Invoice/InvoiceForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Grid } from \"@mui/material\";\nimport { useForm, Form } from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport { InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFValues = {\n  id: 0,\n  supName: '',\n  address1: '',\n  address2: '',\n  address3: '',\n  email: '',\n  contact: '',\n  gender: 'male',\n  departmentId: ''\n};\nconst useStyles = makeStyles(theme => ({\n  pageContent: {\n    margin: 20,\n    padding: 20\n  },\n  searchInput: {\n    width: '75%'\n  },\n  newButton: {\n    position: 'absolute',\n    left: 100,\n    spacing: 24\n  }\n}));\nconst headCells = [{\n  id: 'itemName',\n  label: 'Item Name'\n}, {\n  id: 'quantity',\n  label: 'Quantity'\n}, {\n  id: 'amount',\n  label: 'Amount'\n}];\nconst {\n  TblContainer,\n  TblHead,\n  TblPagination,\n  recordsAfterPagingAndSorting\n} = useTable(recordForView, headCells, filterFn);\nexport default function InvoiceForm(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    addOrEdit,\n    recordForEdit,\n    recordList\n  } = props;\n\n  const validate = (fieldValues = values) => {\n    let temp = { ...errors\n    }; // if('supName' in fieldValues) {\n    //     temp.supName = fieldValues.supName ? \"\" : \"This field is required\"\n    // }\n    // if('contact' in fieldValues) {\n    //     temp.contact = fieldValues.contact.length >= 10 ? \"\" : \"This field is required\"\n    // }\n\n    if ('email' in fieldValues) {\n      temp.email = /$^|.+@.+..+/.test(values.email) ? \"\" : \"Email is not valid\";\n    } // if('departmentId' in fieldValues) {\n    //     temp.departmentId = values.departmentId.length != 0 ? \"\" : \"Thid field is required\"\n    // }\n\n\n    setErrors({ ...temp\n    });\n\n    if (fieldValues == values) {\n      return Object.values(temp).every(x => x == \"\");\n    }\n  };\n\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFValues, true, validate);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validate()) {\n      addOrEdit(values, resetForm);\n    }\n  }; // useEffect(() =>{\n  //     if(recordForEdit != null){\n  //         setValues({\n  //             ...recordForEdit\n  //         })\n  //     }\n  // }, [recordForEdit])\n\n\n  return (\n    /*#__PURE__*/\n    // <Paper className={classes.pageContent}>\n    _jsxDEV(Paper, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"supName\",\n              label: \"Supplier Name\",\n              value: values.supName,\n              onChange: handleInputChange,\n              error: errors.supName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"address1\",\n              label: \"Address Line 1\",\n              value: values.address1,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"address2\",\n              label: \"Address Line 2\",\n              value: values.address2,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"address3\",\n              label: \"Address Line 3\",\n              value: values.address3,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"email\",\n              label: \"Email\",\n              value: values.email,\n              onChange: handleInputChange,\n              error: errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"contact\",\n              label: \"Contact (Number 1, Number 2, ....)\",\n              value: values.contact,\n              onChange: handleInputChange,\n              error: errors.contact\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n              style: {\n                marginLeft: 10\n              },\n              type: \"submit\",\n              text: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n              style: {\n                marginLeft: 10\n              },\n              color: \"inherit\",\n              text: \"Reset\",\n              onClick: resetForm\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TblContainer, {\n        children: [/*#__PURE__*/_jsxDEV(TblHead, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: recordList.map(item => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.itemName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 26\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(InvoiceForm, \"/TnABTV7SyrkdTOoK8AqDxq2cBQ=\", false, function () {\n  return [useStyles, useForm];\n});\n\n_c = InvoiceForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InvoiceForm\");","map":{"version":3,"sources":["/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/inventory-frontend/src/pages/Invoice/InvoiceForm.js"],"names":["React","useEffect","Grid","useForm","Form","Controls","InputAdornment","Paper","TableBody","TableCell","TableRow","Toolbar","makeStyles","initialFValues","id","supName","address1","address2","address3","email","contact","gender","departmentId","useStyles","theme","pageContent","margin","padding","searchInput","width","newButton","position","left","spacing","headCells","label","TblContainer","TblHead","TblPagination","recordsAfterPagingAndSorting","useTable","recordForView","filterFn","InvoiceForm","props","classes","addOrEdit","recordForEdit","recordList","validate","fieldValues","values","temp","errors","test","setErrors","Object","every","x","setValues","handleInputChange","resetForm","handleSubmit","e","preventDefault","marginLeft","map","item","itemName","quantity","amount"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport {InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar} from \"@mui/material\";\nimport {makeStyles} from \"@mui/styles\";\n\n\nconst initialFValues = {\n    id: 0,\n    supName: '',\n    address1:'',\n    address2:'',\n    address3:'',\n    email:'',\n    contact:'',\n    gender:'male',\n    departmentId:'',\n}\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\nconst headCells = [\n    {id: 'itemName', label:'Item Name'},\n    {id: 'quantity', label:'Quantity'},\n    {id: 'amount', label:'Amount'},\n]\n\nconst {\n    TblContainer,\n    TblHead,\n    TblPagination,\n    recordsAfterPagingAndSorting\n} = useTable(recordForView, headCells, filterFn);\n\nexport default function InvoiceForm(props) {\n    const classes = useStyles();\n    const {addOrEdit, recordForEdit, recordList} = props\n    \n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        // if('supName' in fieldValues) {\n        //     temp.supName = fieldValues.supName ? \"\" : \"This field is required\"\n        // }\n        // if('contact' in fieldValues) {\n        //     temp.contact = fieldValues.contact.length >= 10 ? \"\" : \"This field is required\"\n        // }\n        if('email' in fieldValues) {\n            temp.email = (/$^|.+@.+..+/).test(values.email) ? \"\" : \"Email is not valid\"\n        }\n        // if('departmentId' in fieldValues) {\n        //     temp.departmentId = values.departmentId.length != 0 ? \"\" : \"Thid field is required\"\n        // }\n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        if(validate()) {\n            addOrEdit(values, resetForm);\n        }\n    }\n\n    // useEffect(() =>{\n    //     if(recordForEdit != null){\n    //         setValues({\n    //             ...recordForEdit\n    //         })\n    //     }\n    // }, [recordForEdit])\n\n    return (\n        // <Paper className={classes.pageContent}>\n        <Paper>\n        <Form onSubmit={handleSubmit}>\n            <Grid container direction=\"row\">\n                <Grid item xs={6}>\n                    <Controls.Input\n                        name=\"supName\"\n                        label=\"Supplier Name\"\n                        value={values.supName}\n                        onChange={handleInputChange}\n                        error={errors.supName}\n                    />\n\n                    <Controls.Input\n                        name=\"address1\"\n                        label=\"Address Line 1\"\n                        value={values.address1}\n                        onChange={handleInputChange}\n                    />\n\n                    <Controls.Input\n                        name=\"address2\"\n                        label=\"Address Line 2\"\n                        value={values.address2}\n                        onChange={handleInputChange}\n                    />\n\n                    <Controls.Input\n                        name=\"address3\"\n                        label=\"Address Line 3\"\n                        value={values.address3}\n                        onChange={handleInputChange}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <Controls.Input\n                        name=\"email\"\n                        label=\"Email\"\n                        value={values.email}\n                        onChange={handleInputChange}\n                        error={errors.email}\n                    />\n\n                    <Controls.Input\n                        name=\"contact\"\n                        label=\"Contact (Number 1, Number 2, ....)\"\n                        value={values.contact}\n                        onChange={handleInputChange}\n                        error={errors.contact}\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        type=\"submit\"\n                        text=\"Submit\"\n                    />\n\n                    <Controls.Button\n                        style={{marginLeft: 10}}\n                        color=\"inherit\"\n                        text=\"Reset\"\n                        onClick={resetForm}\n                    />\n                </Grid>\n            </Grid>\n        </Form>\n        <TblContainer>\n            <TblHead/>\n            <TableBody>\n                {\n                    recordList.map(item =>\n                        (<TableRow>\n                            <TableCell>{item.itemName}</TableCell>\n                            <TableCell>{item.quantity}</TableCell>\n                            <TableCell>{item.amount}</TableCell>\n                        </TableRow>)\n                    )\n                }\n            </TableBody>\n            </TblContainer>\n</Paper>\n        \n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}