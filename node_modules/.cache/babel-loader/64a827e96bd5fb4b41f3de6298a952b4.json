{"ast":null,"code":"var _jsxFileName = \"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/inventory-frontend/src/pages/Invoice/InvoiceForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Grid } from \"@mui/material\";\nimport { useForm, Form } from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport { Paper, TableBody, TableCell, TableRow } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport useTable from \"../../components/useTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFValues = {\n  id: 0,\n  customerId: '',\n  customerName: '',\n  itemId: '',\n  itemName: '',\n  quantity: '',\n  amount: '',\n  availableQty: ''\n};\nconst useStyles = makeStyles(theme => ({\n  pageContent: {\n    margin: 20,\n    padding: 20\n  },\n  searchInput: {\n    width: '75%'\n  },\n  newButton: {\n    position: 'absolute',\n    left: 100,\n    spacing: 24\n  }\n}));\nconst headCells = [{\n  id: 'itemName',\n  label: 'Item Name'\n}, {\n  id: 'quantity',\n  label: 'Quantity'\n}, {\n  id: 'amount',\n  label: 'Amount'\n}];\nexport default function InvoiceForm(props) {\n  _s();\n\n  // const classes = useStyles();\n  const {\n    addOrEdit,\n    addToTable,\n    recordList,\n    customerOptions,\n    itemOptions,\n    itemQty\n  } = props;\n  const [disableCustomer, setDisableCustomer] = useState(false);\n  const [disableSubmit, setDisableSubmit] = useState(true);\n  const [filterFn] = useState({\n    fn: items => {\n      return items;\n    }\n  });\n  console.log('itemQty', itemQty);\n\n  const validate = (fieldValues = values) => {\n    let temp = { ...errors\n    };\n\n    if (recordList.length == 0) {\n      if ('customerId' in fieldValues) {\n        temp.customerId = fieldValues.customerId ? \"\" : \"This field is required\";\n      }\n    }\n\n    if ('itemId' in fieldValues) {\n      temp.itemId = fieldValues.itemId ? \"\" : \"This field is required\";\n    }\n\n    if ('quantity' in fieldValues) {\n      temp.quantity = fieldValues.quantity ? \"\" : \"Invalid Quantity\";\n    }\n\n    if ('amount' in fieldValues) {\n      temp.amount = fieldValues.amount ? \"\" : \"Invalid Amount\";\n    }\n\n    setErrors({ ...temp\n    });\n\n    if (fieldValues == values) {\n      return Object.values(temp).every(x => x == \"\");\n    }\n  };\n\n  const {\n    TblContainer,\n    TblHead,\n    TblPagination,\n    recordsAfterPagingAndSorting\n  } = useTable(recordList, headCells, filterFn);\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFValues, true, validate);\n\n  const handleSubmit = e => {\n    console.log('recordList', recordList);\n    addOrEdit(recordList, resetForm);\n  };\n\n  const setQty = e => {\n    console.log('AAAA');\n    console.log('values', values);\n    let qty = itemQty.filter(function (i) {\n      return i.id == values.itemId;\n    })[0].quantity;\n    values.availableQty = qty;\n    setValues(values);\n  };\n\n  const addValue = e => {// if(validate()){\n    //     addToTable(values, resetForm);\n    //     setDisableSubmit(false);\n    //     setDisableCustomer(true);\n    // }\n  }; // useEffect(() =>{\n  //     if(recordForEdit != null){\n  //         setValues({\n  //             ...recordForEdit\n  //         })\n  //     }\n  // }, [recordForEdit])\n  // console.log('values.itemId', values.itemId)\n\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: [/*#__PURE__*/_jsxDEV(Controls.Select, {\n            name: \"customerId\",\n            label: \"Select Customer\",\n            options: customerOptions,\n            value: recordList.length > 0 ? recordList[0].customerId : values.customerId,\n            onChange: handleInputChange,\n            error: errors.customerId,\n            disabled: disableCustomer,\n            error: errors.customerId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Controls.Select, {\n            name: \"itemId\",\n            label: \"Select Item\",\n            options: itemOptions,\n            value: values.itemId,\n            onChange: handleInputChange,\n            error: errors.itemId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n            name: \"availableQty\",\n            label: \"Available Quantity\",\n            value: values.availableQty,\n            onChange: handleInputChange,\n            type: \"number\",\n            error: errors.availableQty,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n            name: \"quantity\",\n            label: \"Quantity\",\n            value: values.quantity,\n            onChange: handleInputChange,\n            type: \"number\",\n            error: errors.quantity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n            name: \"amount\",\n            label: \"Amount\",\n            value: values.amount,\n            onChange: handleInputChange,\n            type: \"number\",\n            error: errors.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: [/*#__PURE__*/_jsxDEV(Controls.Button, {\n            style: {\n              margin: 10,\n              marginTop: '70px',\n              maxWidth: '60px',\n              minWidth: '100px'\n            },\n            text: \"Add\",\n            onClick: addValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n            style: {\n              margin: 10\n            },\n            color: \"error\",\n            onClick: handleSubmit,\n            text: \"Submit\",\n            disabled: disableSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n            style: {\n              margin: 10,\n              maxWidth: '60px',\n              minWidth: '100px'\n            },\n            color: \"inherit\",\n            text: \"Reset\",\n            onClick: resetForm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), recordList.length > 0 ? /*#__PURE__*/_jsxDEV(TblContainer, {\n      children: [/*#__PURE__*/_jsxDEV(TblHead, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: recordsAfterPagingAndSorting().map(item => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: item.itemName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: item.quantity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: item.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 26\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this) : null, recordList.length > 0 ? /*#__PURE__*/_jsxDEV(TblPagination, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 34\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(InvoiceForm, \"px0m7S3P1Y7SxVBFHq5UcwYtfp0=\", false, function () {\n  return [useTable, useForm];\n});\n\n_c = InvoiceForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InvoiceForm\");","map":{"version":3,"sources":["/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/inventory-frontend/src/pages/Invoice/InvoiceForm.js"],"names":["React","useState","Grid","useForm","Form","Controls","Paper","TableBody","TableCell","TableRow","makeStyles","useTable","initialFValues","id","customerId","customerName","itemId","itemName","quantity","amount","availableQty","useStyles","theme","pageContent","margin","padding","searchInput","width","newButton","position","left","spacing","headCells","label","InvoiceForm","props","addOrEdit","addToTable","recordList","customerOptions","itemOptions","itemQty","disableCustomer","setDisableCustomer","disableSubmit","setDisableSubmit","filterFn","fn","items","console","log","validate","fieldValues","values","temp","errors","length","setErrors","Object","every","x","TblContainer","TblHead","TblPagination","recordsAfterPagingAndSorting","setValues","handleInputChange","resetForm","handleSubmit","e","setQty","qty","filter","i","addValue","marginTop","maxWidth","minWidth","map","item"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport {Paper, TableBody, TableCell, TableRow} from \"@mui/material\";\nimport {makeStyles} from \"@mui/styles\";\nimport useTable from \"../../components/useTable\"\n\nconst initialFValues = {\n    id: 0,\n    customerId: '',\n    customerName: '',\n    itemId:'',\n    itemName:'',\n    quantity:'',\n    amount:'',\n    availableQty:'',\n}\n\nconst useStyles = makeStyles(theme =>({\n    pageContent: {\n        margin: 20,\n        padding: 20\n    },\n    searchInput:{\n        width:'75%'\n    },\n    newButton:{\n        position: 'absolute',\n        left: 100,\n        spacing:24\n    }\n}));\n\nconst headCells = [\n    {id: 'itemName', label:'Item Name'},\n    {id: 'quantity', label:'Quantity'},\n    {id: 'amount', label:'Amount'},\n]\n\nexport default function InvoiceForm(props) {\n\n    // const classes = useStyles();\n    const {addOrEdit, addToTable, recordList, customerOptions, itemOptions, itemQty} = props\n    const [disableCustomer, setDisableCustomer] = useState(false);\n    const [disableSubmit, setDisableSubmit] = useState(true);\n    const [filterFn] = useState({fn: items => {return items;}})\n    console.log('itemQty', itemQty)\n\n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        \n        if(recordList.length == 0){\n            if('customerId' in fieldValues) {\n                temp.customerId = fieldValues.customerId ? \"\" : \"This field is required\"\n            }\n        }\n        if('itemId' in fieldValues) {\n            temp.itemId = fieldValues.itemId ? \"\" : \"This field is required\"\n        }\n        if('quantity' in fieldValues) {\n            temp.quantity = fieldValues.quantity ? \"\" : \"Invalid Quantity\"\n        }\n        if('amount' in fieldValues) {\n            temp.amount = fieldValues.amount ? \"\" : \"Invalid Amount\"\n        }\n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        TblContainer,\n        TblHead,\n        TblPagination,\n        recordsAfterPagingAndSorting\n    } = useTable(recordList, headCells, filterFn);\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        console.log('recordList', recordList)\n        addOrEdit(recordList, resetForm);\n    }\n\n    const setQty = e => {\n        console.log('AAAA')\n        console.log('values', values)\n        let qty = itemQty.filter( function (i) {\n            return i.id == values.itemId;\n        })[0].quantity;\n        values.availableQty = qty;\n        setValues(values);\n    }\n\n    const addValue = e =>{\n        // if(validate()){\n        //     addToTable(values, resetForm);\n        //     setDisableSubmit(false);\n        //     setDisableCustomer(true);\n        // }\n    }\n\n    // useEffect(() =>{\n    //     if(recordForEdit != null){\n    //         setValues({\n    //             ...recordForEdit\n    //         })\n    //     }\n    // }, [recordForEdit])\n    // console.log('values.itemId', values.itemId)\n    return (\n        <Paper>\n        <Form onSubmit={handleSubmit}>\n            <Grid container direction=\"row\">\n                <Grid item xs={8}>\n                <Controls.Select\n                        name=\"customerId\"\n                        label=\"Select Customer\"\n                        options={customerOptions}\n                        value={recordList.length > 0 ? recordList[0].customerId : values.customerId}\n                        onChange={handleInputChange}\n                        error={errors.customerId}\n                        disabled={disableCustomer}\n                        error={errors.customerId}\n                    />\n\n                    <Controls.Select\n                        name=\"itemId\"\n                        label=\"Select Item\"\n                        options={itemOptions}\n                        value={values.itemId}\n                        onChange={handleInputChange}\n                        error={errors.itemId}\n                    />\n\n                    <Controls.Input\n                        name=\"availableQty\"\n                        label=\"Available Quantity\"\n                        value={values.availableQty}\n                        onChange={handleInputChange}\n                        type='number'\n                        error={errors.availableQty}\n                        disabled={true}\n                    />\n\n                    <Controls.Input\n                        name=\"quantity\"\n                        label=\"Quantity\"\n                        value={values.quantity}\n                        onChange={handleInputChange}\n                        type='number'\n                        error={errors.quantity}\n                    />\n\n                    <Controls.Input\n                        name=\"amount\"\n                        label=\"Amount\"\n                        value={values.amount}\n                        onChange={handleInputChange}\n                        type='number'\n                        error={errors.amount}\n                    />\n                </Grid>\n                \n                <Grid item xs={4}>\n                    <Controls.Button\n                        style={{margin: 10, marginTop:'70px', maxWidth: '60px', minWidth: '100px'}}\n                        text=\"Add\"\n                        onClick={addValue}\n                    />\n                    <Controls.Button\n                        style={{margin: 10}}\n                        color=\"error\"\n                        onClick={handleSubmit}\n                        text=\"Submit\"\n                        disabled={disableSubmit}\n                    />\n\n                    <Controls.Button\n                        style={{margin: 10, maxWidth: '60px', minWidth: '100px'}}\n                        color=\"inherit\"\n                        text=\"Reset\"\n                        onClick={resetForm}\n                    />\n                </Grid>\n            </Grid>\n        </Form>\n        {recordList.length > 0 ? \n        <TblContainer>\n            <TblHead/>\n            <TableBody>\n                {   \n                    recordsAfterPagingAndSorting().map(item =>\n                        (<TableRow key={item.id}>\n                            <TableCell>{item.itemName}</TableCell>\n                            <TableCell>{item.quantity}</TableCell>\n                            <TableCell>{item.amount}</TableCell>\n                        </TableRow>)\n                    )\n                }\n            </TableBody>\n            </TblContainer>\n        : null }\n        {recordList.length > 0 ? <TblPagination/> : null }\n        </Paper>\n        \n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}