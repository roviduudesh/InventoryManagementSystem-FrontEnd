{"ast":null,"code":"var _jsxFileName = \"/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/inventory-frontend/src/pages/Login/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Grid } from \"@mui/material\";\nimport { useForm, Form } from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport Popup from \"../../components/Popup\";\nimport { Dialog, DialogContent, DialogTitle, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFValues = {\n  userName: '',\n  password: ''\n};\nexport default function LoginForm(props) {\n  _s();\n\n  const [openPopup, setOpenPopup] = useState(true);\n\n  const validate = (fieldValues = values) => {\n    let temp = { ...errors\n    };\n\n    if ('supName' in fieldValues) {\n      temp.supName = fieldValues.supName ? \"\" : \"This field is required\";\n    }\n\n    if ('contact' in fieldValues) {\n      temp.contact = fieldValues.contact.length == 10 ? \"\" : \"This field is required\";\n    }\n\n    setErrors({ ...temp\n    });\n\n    if (fieldValues == values) {\n      return Object.values(temp).every(x => x == \"\");\n    }\n  };\n\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFValues, true, validate);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validate()) {// addOrEdit(values, resetForm);\n    }\n  }; // useEffect(() =>{\n  //     if(recordForEdit != null){\n  //         setValues({\n  //             ...recordForEdit\n  //         })\n  //     }\n  // }, [recordForEdit])\n\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"div\",\n          children: 'Login'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      dividers: true,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"userName\",\n              label: \"Enter Username\",\n              value: values.userName,\n              onChange: handleInputChange,\n              error: errors.userName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n              name: \"password\",\n              label: \"Enter Password\",\n              value: values.password,\n              onChange: handleInputChange,\n              error: errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Controls.Button, {\n              style: {\n                marginLeft: 10\n              },\n              type: \"submit\",\n              text: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n              style: {\n                marginLeft: 10\n              },\n              color: \"inherit\",\n              text: \"Reset\",\n              onClick: resetForm\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginForm, \"59WqSr9L5oSd2L7LDYcCF0Td0nI=\", false, function () {\n  return [useForm];\n});\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/miltonbelpage/Documents/CareerCalling/InventoryManagementSystem-FrontEnd/inventory-frontend/src/pages/Login/LoginForm.js"],"names":["React","useEffect","useState","Grid","useForm","Form","Controls","Popup","Dialog","DialogContent","DialogTitle","Typography","initialFValues","userName","password","LoginForm","props","openPopup","setOpenPopup","validate","fieldValues","values","temp","errors","supName","contact","length","setErrors","Object","every","x","setValues","handleInputChange","resetForm","handleSubmit","e","preventDefault","textAlign","marginLeft"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Grid} from \"@mui/material\";\nimport {useForm, Form} from \".././../components/useForm\";\nimport Controls from \"../../components/controls/Controls\";\nimport Popup from \"../../components/Popup\";\nimport {Dialog, DialogContent, DialogTitle, Typography} from \"@mui/material\";\n\nconst initialFValues = {\n    userName:'',\n    password:'',\n}\n\nexport default function LoginForm(props) {\n\n    const [openPopup, setOpenPopup] = useState(true);\n\n    const validate = (fieldValues = values) => {\n        let temp = {...errors}\n        if('supName' in fieldValues) {\n            temp.supName = fieldValues.supName ? \"\" : \"This field is required\"\n        }\n        if('contact' in fieldValues) {\n            temp.contact = fieldValues.contact.length == 10 ? \"\" : \"This field is required\"\n        }\n        setErrors({\n            ...temp\n        })\n        if(fieldValues == values) {\n            return Object.values(temp).every(x => x == \"\")\n        }\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate)\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        if(validate()) {\n            // addOrEdit(values, resetForm);\n        }\n    }\n\n    // useEffect(() =>{\n    //     if(recordForEdit != null){\n    //         setValues({\n    //             ...recordForEdit\n    //         })\n    //     }\n    // }, [recordForEdit])\n\n    return (\n\n        <Dialog open={true}>\n            <DialogTitle>\n                <div style={{textAlign:'center'}}>\n                    <Typography variant=\"h4\" component=\"div\">\n                        {'Login'}\n                    </Typography>\n                    \n                </div>\n            </DialogTitle>\n            <DialogContent dividers>\n            <Form onSubmit={handleSubmit}>\n                <Grid container direction=\"row\">\n                    <Grid item xs={6}>\n                        <Controls.Input\n                            name=\"userName\"\n                            label=\"Enter Username\"\n                            value={values.userName}\n                            onChange={handleInputChange}\n                            error={errors.userName}\n                        />\n\n                        <Controls.Input\n                            name=\"password\"\n                            label=\"Enter Password\"\n                            value={values.password}\n                            onChange={handleInputChange}\n                            error={errors.password}\n                        />\n\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Controls.Button\n                            style={{marginLeft: 10}}\n                            type=\"submit\"\n                            text=\"Submit\"\n                        />\n\n                        <Controls.Button\n                            style={{marginLeft: 10}}\n                            color=\"inherit\"\n                            text=\"Reset\"\n                            onClick={resetForm}\n                        />\n                    </Grid>\n                </Grid>\n            </Form>\n            </DialogContent>\n        </Dialog>\n\n        \n            \n        \n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}